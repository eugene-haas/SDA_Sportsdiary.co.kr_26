/* ==================================================================================
   aryReqUser Field  -  fUse, teamNo, SeedNo, Ranking, PlayerOrder, GameRequestGroupIDX, GameRequestPlayerIDX,
                     MemberIDX, MemberName, Team, TeamName, PrevTeam, PrevTeamName
================================================================================== */

/* ===============================================================================
   Bye Position 1 ~ 256
=============================================================================== */
var gAryByePos = [
    [0],
    [0],
    [1, 2],
    [0],
    [3, 2, 4, 7],
    [2, 2, 7],
    [1, 2],
    [0],
    [7, 2, 4, 6, 8, 11, 13, 15],
    [6, 2, 4, 6, 11, 13, 15],
    [5, 2, 4, 6, 11, 15],
    [4, 2, 6, 11, 15],
    [3, 2, 6, 15],
    [2, 2, 15],
    [1, 2],
    [0],
    [15, 2, 4, 6, 8, 10, 12, 14, 16, 19, 21, 23, 25, 27, 29, 31],
    [14, 2, 4, 6, 8, 10, 12, 14, 19, 21, 23, 25, 27, 29, 31],
    [13, 2, 4, 6, 8, 10, 12, 14, 19, 21, 23, 27, 29, 31],
    [12, 2, 4, 6, 10, 12, 14, 19, 21, 23, 27, 29, 31],
    [11, 2, 4, 6, 10, 12, 14, 19, 23, 27, 29, 31],
    [10, 2, 4, 6, 10, 14, 19, 23, 27, 29, 31],
    [9, 2, 4, 6, 10, 14, 19, 23, 27, 31],
    [8, 2, 6, 10, 14, 19, 23, 27, 31],
    [7, 2, 6, 10, 14, 23, 27, 31],
    [6, 2, 6, 10, 23, 27, 31],
    [5, 2, 6, 10, 23, 31],
    [4, 2, 10, 23, 31],
    [3, 2, 10, 31],
    [2, 2, 31],
    [1, 2],
    [0],
    [31, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63],
    [30, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63],
    [29, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 35, 37, 39, 41, 43, 45, 47, 51, 53, 55, 57, 59, 61, 63],
    [28, 2, 4, 6, 8, 10, 12, 14, 18, 20, 22, 24, 26, 28, 30, 35, 37, 39, 41, 43, 45, 47, 51, 53, 55, 57, 59, 61, 63],
    [27, 2, 4, 6, 8, 10, 12, 14, 18, 20, 22, 24, 26, 28, 30, 35, 37, 39, 43, 45, 47, 51, 53, 55, 57, 59, 61, 63],
    [26, 2, 4, 6, 8, 10, 12, 14, 18, 20, 22, 26, 28, 30, 35, 37, 39, 43, 45, 47, 51, 53, 55, 57, 59, 61, 63],
    [25, 2, 4, 6, 8, 10, 12, 14, 18, 20, 22, 26, 28, 30, 35, 37, 39, 43, 45, 47, 51, 53, 55, 59, 61, 63],
    [24, 2, 4, 6, 10, 12, 14, 18, 20, 22, 26, 28, 30, 35, 37, 39, 43, 45, 47, 51, 53, 55, 59, 61, 63],
    [23, 2, 4, 6, 10, 12, 14, 18, 20, 22, 26, 28, 30, 35, 39, 43, 45, 47, 51, 53, 55, 59, 61, 63],
    [22, 2, 4, 6, 10, 12, 14, 18, 20, 22, 26, 30, 35, 39, 43, 45, 47, 51, 53, 55, 59, 61, 63],
    [21, 2, 4, 6, 10, 12, 14, 18, 20, 22, 26, 30, 35, 39, 43, 45, 47, 51, 55, 59, 61, 63],
    [20, 2, 4, 6, 10, 14, 18, 20, 22, 26, 30, 35, 39, 43, 45, 47, 51, 55, 59, 61, 63],
    [19, 2, 4, 6, 10, 14, 18, 20, 22, 26, 30, 35, 39, 43, 47, 51, 55, 59, 61, 63],
    [18, 2, 4, 6, 10, 14, 18, 22, 26, 30, 35, 39, 43, 47, 51, 55, 59, 61, 63],
    [17, 2, 4, 6, 10, 14, 18, 22, 26, 30, 35, 39, 43, 47, 51, 55, 59, 63],
    [16, 2, 6, 10, 14, 18, 22, 26, 30, 35, 39, 43, 47, 51, 55, 59, 63],
    [15, 2, 6, 10, 14, 18, 22, 26, 30, 39, 43, 47, 51, 55, 59, 63],
    [14, 2, 6, 10, 14, 18, 22, 26, 39, 43, 47, 51, 55, 59, 63],
    [13, 2, 6, 10, 14, 18, 22, 26, 39, 43, 47, 55, 59, 63],
    [12, 2, 6, 10, 18, 22, 26, 39, 43, 47, 55, 59, 63],
    [11, 2, 6, 10, 18, 22, 26, 39, 47, 55, 59, 63],
    [10, 2, 6, 10, 18, 26, 39, 47, 55, 59, 63],
    [9, 2, 6, 10, 18, 26, 39, 47, 55, 63],
    [8, 2, 10, 18, 26, 39, 47, 55, 63],
    [7, 2, 10, 18, 26, 47, 55, 63],
    [6, 2, 10, 18, 47, 55, 63],
    [5, 2, 10, 18, 47, 63],
    [4, 2, 18, 47, 63],
    [3, 2, 18, 63],
    [2, 2, 63],
    [1, 2],
    [0],
    [63, 2, 4, 6, 8, 18, 20, 22, 24, 34, 36, 38, 40, 50, 52, 54, 56, 67, 69, 71, 81, 83, 85, 87, 97, 99, 101, 103, 113, 115, 117, 119, 10, 12, 14, 16, 26, 28, 30, 32, 42, 44, 46, 48, 58, 60, 62, 64, 73, 75, 77, 79, 89, 91, 93, 95, 105, 107, 109, 111, 121, 123, 125, 127],
    [62, 2, 4, 6, 8, 18, 20, 22, 24, 34, 36, 38, 40, 50, 52, 54, 56, 67, 69, 71, 81, 83, 85, 87, 97, 99, 101, 103, 113, 115, 117, 119, 10, 12, 14, 16, 26, 28, 30, 32, 42, 44, 46, 48, 58, 60, 62, 73, 75, 77, 79, 89, 91, 93, 95, 105, 107, 109, 111, 121, 123, 125, 127],
    [61, 2, 4, 6, 8, 18, 20, 22, 24, 34, 36, 38, 40, 50, 52, 54, 56, 67, 69, 71, 81, 83, 85, 87, 99, 101, 103, 113, 115, 117, 119, 10, 12, 14, 16, 26, 28, 30, 32, 42, 44, 46, 48, 58, 60, 62, 73, 75, 77, 79, 89, 91, 93, 95, 105, 107, 109, 111, 121, 123, 125, 127],
    [60, 2, 4, 6, 8, 18, 20, 22, 24, 34, 36, 38, 40, 50, 52, 54, 56, 67, 69, 71, 81, 83, 85, 87, 99, 101, 103, 113, 115, 117, 119, 10, 12, 14, 16, 26, 28, 30, 42, 44, 46, 48, 58, 60, 62, 73, 75, 77, 79, 89, 91, 93, 95, 105, 107, 109, 111, 121, 123, 125, 127],
    [59, 2, 4, 6, 8, 18, 20, 22, 24, 34, 36, 38, 40, 50, 52, 54, 56, 67, 69, 71, 83, 85, 87, 99, 101, 103, 113, 115, 117, 119, 10, 12, 14, 16, 26, 28, 30, 42, 44, 46, 48, 58, 60, 62, 73, 75, 77, 79, 89, 91, 93, 95, 105, 107, 109, 111, 121, 123, 125, 127],
    [58, 2, 4, 6, 8, 18, 20, 22, 24, 34, 36, 38, 40, 50, 52, 54, 56, 67, 69, 71, 83, 85, 87, 99, 101, 103, 113, 115, 117, 119, 10, 12, 14, 16, 26, 28, 30, 42, 44, 46, 58, 60, 62, 73, 75, 77, 79, 89, 91, 93, 95, 105, 107, 109, 111, 121, 123, 125, 127],
    [57, 2, 4, 6, 8, 18, 20, 22, 24, 34, 36, 38, 40, 50, 52, 54, 56, 67, 69, 71, 83, 85, 87, 99, 101, 103, 115, 117, 119, 10, 12, 14, 16, 26, 28, 30, 42, 44, 46, 58, 60, 62, 73, 75, 77, 79, 89, 91, 93, 95, 105, 107, 109, 111, 121, 123, 125, 127],
    [56, 2, 4, 6, 8, 18, 20, 22, 24, 34, 36, 38, 40, 50, 52, 54, 56, 67, 69, 71, 83, 85, 87, 99, 101, 103, 115, 117, 119, 10, 12, 14, 26, 28, 30, 42, 44, 46, 58, 60, 62, 73, 75, 77, 79, 89, 91, 93, 95, 105, 107, 109, 111, 121, 123, 125, 127],
    [55, 2, 4, 6, 8, 18, 20, 22, 24, 34, 36, 38, 40, 50, 52, 54, 56, 67, 69, 71, 83, 85, 87, 99, 101, 103, 115, 117, 119, 10, 12, 14, 26, 28, 30, 42, 44, 46, 58, 60, 62, 75, 77, 79, 89, 91, 93, 95, 105, 107, 109, 111, 121, 123, 125, 127],
    [54, 2, 4, 6, 8, 18, 20, 22, 24, 34, 36, 38, 40, 50, 52, 54, 67, 69, 71, 83, 85, 87, 99, 101, 103, 115, 117, 119, 10, 12, 14, 26, 28, 30, 42, 44, 46, 58, 60, 62, 75, 77, 79, 89, 91, 93, 95, 105, 107, 109, 111, 121, 123, 125, 127],
    [53, 2, 4, 6, 8, 18, 20, 22, 24, 34, 36, 38, 40, 50, 52, 54, 67, 69, 71, 83, 85, 87, 99, 101, 103, 115, 117, 119, 10, 12, 14, 26, 28, 30, 42, 44, 46, 58, 60, 62, 75, 77, 79, 89, 91, 93, 95, 107, 109, 111, 121, 123, 125, 127],
    [52, 2, 4, 6, 8, 18, 20, 22, 34, 36, 38, 40, 50, 52, 54, 67, 69, 71, 83, 85, 87, 99, 101, 103, 115, 117, 119, 10, 12, 14, 26, 28, 30, 42, 44, 46, 58, 60, 62, 75, 77, 79, 89, 91, 93, 95, 107, 109, 111, 121, 123, 125, 127],
    [51, 2, 4, 6, 8, 18, 20, 22, 34, 36, 38, 40, 50, 52, 54, 67, 69, 71, 83, 85, 87, 99, 101, 103, 115, 117, 119, 10, 12, 14, 26, 28, 30, 42, 44, 46, 58, 60, 62, 75, 77, 79, 91, 93, 95, 107, 109, 111, 121, 123, 125, 127],
    [50, 2, 4, 6, 8, 18, 20, 22, 34, 36, 38, 50, 52, 54, 67, 69, 71, 83, 85, 87, 99, 101, 103, 115, 117, 119, 10, 12, 14, 26, 28, 30, 42, 44, 46, 58, 60, 62, 75, 77, 79, 91, 93, 95, 107, 109, 111, 121, 123, 125, 127],
    [49, 2, 4, 6, 8, 18, 20, 22, 34, 36, 38, 50, 52, 54, 67, 69, 71, 83, 85, 87, 99, 101, 103, 115, 117, 119, 10, 12, 14, 26, 28, 30, 42, 44, 46, 58, 60, 62, 75, 77, 79, 91, 93, 95, 107, 109, 111, 123, 125, 127],
    [48, 2, 4, 6, 18, 20, 22, 34, 36, 38, 50, 52, 54, 67, 69, 71, 83, 85, 87, 99, 101, 103, 115, 117, 119, 10, 12, 14, 26, 28, 30, 42, 44, 46, 58, 60, 62, 75, 77, 79, 91, 93, 95, 107, 109, 111, 123, 125, 127],
    [47, 2, 4, 6, 18, 20, 22, 34, 36, 38, 50, 52, 54, 69, 71, 83, 85, 87, 99, 101, 103, 115, 117, 119, 10, 12, 14, 26, 28, 30, 42, 44, 46, 58, 60, 62, 75, 77, 79, 91, 93, 95, 107, 109, 111, 123, 125, 127],
    [46, 2, 4, 6, 18, 20, 22, 34, 36, 38, 50, 52, 54, 69, 71, 83, 85, 87, 99, 101, 103, 115, 117, 119, 10, 12, 14, 26, 28, 30, 42, 44, 46, 58, 60, 75, 77, 79, 91, 93, 95, 107, 109, 111, 123, 125, 127],
    [45, 2, 4, 6, 18, 20, 22, 34, 36, 38, 50, 52, 54, 69, 71, 83, 85, 87, 101, 103, 115, 117, 119, 10, 12, 14, 26, 28, 30, 42, 44, 46, 58, 60, 75, 77, 79, 91, 93, 95, 107, 109, 111, 123, 125, 127],
    [44, 2, 4, 6, 18, 20, 22, 34, 36, 38, 50, 52, 54, 69, 71, 83, 85, 87, 101, 103, 115, 117, 119, 10, 12, 14, 26, 28, 42, 44, 46, 58, 60, 75, 77, 79, 91, 93, 95, 107, 109, 111, 123, 125, 127],
    [43, 2, 4, 6, 18, 20, 22, 34, 36, 38, 50, 52, 54, 69, 71, 85, 87, 101, 103, 115, 117, 119, 10, 12, 14, 26, 28, 42, 44, 46, 58, 60, 75, 77, 79, 91, 93, 95, 107, 109, 111, 123, 125, 127],
    [42, 2, 4, 6, 18, 20, 22, 34, 36, 38, 50, 52, 54, 69, 71, 85, 87, 101, 103, 115, 117, 119, 10, 12, 14, 26, 28, 42, 44, 58, 60, 75, 77, 79, 91, 93, 95, 107, 109, 111, 123, 125, 127],
    [41, 2, 4, 6, 18, 20, 22, 34, 36, 38, 50, 52, 54, 69, 71, 85, 87, 101, 103, 117, 119, 10, 12, 14, 26, 28, 42, 44, 58, 60, 75, 77, 79, 91, 93, 95, 107, 109, 111, 123, 125, 127],
    [40, 2, 4, 6, 18, 20, 22, 34, 36, 38, 50, 52, 54, 69, 71, 85, 87, 101, 103, 117, 119, 10, 12, 26, 28, 42, 44, 58, 60, 75, 77, 79, 91, 93, 95, 107, 109, 111, 123, 125, 127],
    [39, 2, 4, 6, 18, 20, 22, 34, 36, 38, 50, 52, 54, 69, 71, 85, 87, 101, 103, 117, 119, 10, 12, 26, 28, 42, 44, 58, 60, 77, 79, 91, 93, 95, 107, 109, 111, 123, 125, 127],
    [38, 2, 4, 6, 18, 20, 22, 34, 36, 38, 50, 52, 69, 71, 85, 87, 101, 103, 117, 119, 10, 12, 26, 28, 42, 44, 58, 60, 77, 79, 91, 93, 95, 107, 109, 111, 123, 125, 127],
    [37, 2, 4, 6, 18, 20, 22, 34, 36, 38, 50, 52, 69, 71, 85, 87, 101, 103, 117, 119, 10, 12, 26, 28, 42, 44, 58, 60, 77, 79, 91, 93, 95, 109, 111, 123, 125, 127],
    [36, 2, 4, 6, 18, 20, 34, 36, 38, 50, 52, 69, 71, 85, 87, 101, 103, 117, 119, 10, 12, 26, 28, 42, 44, 58, 60, 77, 79, 91, 93, 95, 109, 111, 123, 125, 127],
    [35, 2, 4, 6, 18, 20, 34, 36, 38, 50, 52, 69, 71, 85, 87, 101, 103, 117, 119, 10, 12, 26, 28, 42, 44, 58, 60, 77, 79, 93, 95, 109, 111, 123, 125, 127],
    [34, 2, 4, 6, 18, 20, 34, 36, 50, 52, 69, 71, 85, 87, 101, 103, 117, 119, 10, 12, 26, 28, 42, 44, 58, 60, 77, 79, 93, 95, 109, 111, 123, 125, 127],
    [33, 2, 4, 6, 18, 20, 34, 36, 50, 52, 69, 71, 85, 87, 101, 103, 117, 119, 10, 12, 26, 28, 42, 44, 58, 60, 77, 79, 93, 95, 109, 111, 125, 127],
    [32, 2, 4, 18, 20, 34, 36, 50, 52, 69, 71, 85, 87, 101, 103, 117, 119, 10, 12, 26, 28, 42, 44, 58, 60, 77, 79, 93, 95, 109, 111, 125, 127],
    [31, 2, 4, 18, 20, 34, 36, 50, 52, 71, 85, 87, 101, 103, 117, 119, 10, 12, 26, 28, 42, 44, 58, 60, 77, 79, 93, 95, 109, 111, 125, 127],
    [30, 2, 4, 18, 20, 34, 36, 50, 52, 71, 85, 87, 101, 103, 117, 119, 10, 12, 26, 28, 42, 44, 58, 77, 79, 93, 95, 109, 111, 125, 127],
    [29, 2, 4, 18, 20, 34, 36, 50, 52, 71, 85, 87, 103, 117, 119, 10, 12, 26, 28, 42, 44, 58, 77, 79, 93, 95, 109, 111, 125, 127],
    [28, 2, 4, 18, 20, 34, 36, 50, 52, 71, 85, 87, 103, 117, 119, 10, 12, 26, 42, 44, 58, 77, 79, 93, 95, 109, 111, 125, 127],
    [27, 2, 4, 18, 20, 34, 36, 50, 52, 71, 87, 103, 117, 119, 10, 12, 26, 42, 44, 58, 77, 79, 93, 95, 109, 111, 125, 127],
    [26, 2, 4, 18, 20, 34, 36, 50, 52, 71, 87, 103, 117, 119, 10, 12, 26, 42, 58, 77, 79, 93, 95, 109, 111, 125, 127],
    [25, 2, 4, 18, 20, 34, 36, 50, 52, 71, 87, 103, 119, 10, 12, 26, 42, 58, 77, 79, 93, 95, 109, 111, 125, 127],
    [24, 2, 4, 18, 20, 34, 36, 50, 52, 71, 87, 103, 119, 10, 26, 42, 58, 77, 79, 93, 95, 109, 111, 125, 127],
    [23, 2, 4, 18, 20, 34, 36, 50, 52, 71, 87, 103, 119, 10, 26, 42, 58, 79, 93, 95, 109, 111, 125, 127],
    [22, 2, 4, 18, 20, 34, 36, 50, 71, 87, 103, 119, 10, 26, 42, 58, 79, 93, 95, 109, 111, 125, 127],
    [21, 2, 4, 18, 20, 34, 36, 50, 71, 87, 103, 119, 10, 26, 42, 58, 79, 93, 95, 111, 125, 127],
    [20, 2, 4, 18, 34, 36, 50, 71, 87, 103, 119, 10, 26, 42, 58, 79, 93, 95, 111, 125, 127],
    [19, 2, 4, 18, 34, 36, 50, 71, 87, 103, 119, 10, 26, 42, 58, 79, 95, 111, 125, 127],
    [18, 2, 4, 18, 34, 50, 71, 87, 103, 119, 10, 26, 42, 58, 79, 95, 111, 125, 127],
    [17, 2, 4, 18, 34, 50, 71, 87, 103, 119, 10, 26, 42, 58, 79, 95, 111, 127],
    [16, 2, 18, 34, 50, 71, 87, 103, 119, 10, 26, 42, 58, 79, 95, 111, 127],
    [15, 2, 18, 34, 50, 87, 103, 119, 10, 26, 42, 58, 79, 95, 111, 127],
    [14, 2, 18, 34, 50, 87, 103, 119, 10, 26, 42, 79, 95, 111, 127],
    [13, 2, 18, 34, 50, 87, 119, 10, 26, 42, 79, 95, 111, 127],
    [12, 2, 18, 34, 50, 87, 119, 10, 42, 79, 95, 111, 127],
    [11, 2, 18, 34, 50, 119, 10, 42, 79, 95, 111, 127],
    [10, 2, 18, 34, 50, 119, 10, 79, 95, 111, 127],
    [9, 2, 18, 34, 50, 10, 79, 95, 111, 127],
    [8, 2, 18, 34, 50, 79, 95, 111, 127],
    [7, 2, 18, 34, 50, 95, 111, 127],
    [6, 2, 18, 34, 95, 111, 127],
    [5, 2, 18, 34, 95, 127],
    [4, 2, 34, 95, 127],
    [3, 2, 34, 127],
    [2, 2, 127],
    [1, 2],
    [0],
    [127, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255],
    [126, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255],
    [125, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255],
    [124, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255],
    [123, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255],
    [122, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255],
    [121, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255],
    [120, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255],
    [119, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 131, 133, 135, 137, 139, 141, 143, 147, 149, 151, 153, 155, 157, 159, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255],
    [118, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 98, 100, 102, 104, 106, 108, 110, 114, 116, 118, 120, 122, 124, 126, 131, 133, 135, 137, 139, 141, 143, 147, 149, 151, 153, 155, 157, 159, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219, 221, 223, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255],
    [117, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 98, 100, 102, 104, 106, 108, 110, 114, 116, 118, 120, 122, 124, 126, 131, 133, 135, 137, 139, 141, 143, 147, 149, 151, 153, 155, 157, 159, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 195, 197, 199, 201, 203, 205, 207, 211, 213, 215, 217, 219, 221, 223, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255],
    [116, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 34, 36, 38, 40, 42, 44, 46, 50, 52, 54, 56, 58, 60, 62, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 98, 100, 102, 104, 106, 108, 110, 114, 116, 118, 120, 122, 124, 126, 131, 133, 135, 137, 139, 141, 143, 147, 149, 151, 153, 155, 157, 159, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 195, 197, 199, 201, 203, 205, 207, 211, 213, 215, 217, 219, 221, 223, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255],
    [115, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 34, 36, 38, 40, 42, 44, 46, 50, 52, 54, 56, 58, 60, 62, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 98, 100, 102, 104, 106, 108, 110, 114, 116, 118, 120, 122, 124, 126, 131, 133, 135, 137, 139, 141, 143, 147, 149, 151, 153, 155, 157, 159, 163, 165, 167, 169, 171, 173, 175, 179, 181, 183, 185, 187, 189, 191, 195, 197, 199, 201, 203, 205, 207, 211, 213, 215, 217, 219, 221, 223, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255],
    [114, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 34, 36, 38, 40, 42, 44, 46, 50, 52, 54, 56, 58, 60, 62, 66, 68, 70, 72, 74, 76, 78, 82, 84, 86, 88, 90, 92, 94, 98, 100, 102, 104, 106, 108, 110, 114, 116, 118, 120, 122, 124, 126, 131, 133, 135, 137, 139, 141, 143, 147, 149, 151, 153, 155, 157, 159, 163, 165, 167, 169, 171, 173, 175, 179, 181, 183, 185, 187, 189, 191, 195, 197, 199, 201, 203, 205, 207, 211, 213, 215, 217, 219, 221, 223, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255],
    [113, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 34, 36, 38, 40, 42, 44, 46, 50, 52, 54, 56, 58, 60, 62, 66, 68, 70, 72, 74, 76, 78, 82, 84, 86, 88, 90, 92, 94, 98, 100, 102, 104, 106, 108, 110, 114, 116, 118, 120, 122, 124, 126, 131, 133, 135, 137, 139, 141, 143, 147, 149, 151, 153, 155, 157, 159, 163, 165, 167, 169, 171, 173, 175, 179, 181, 183, 185, 187, 189, 191, 195, 197, 199, 201, 203, 205, 207, 211, 213, 215, 217, 219, 221, 223, 227, 229, 231, 233, 235, 237, 239, 243, 245, 247, 249, 251, 253, 255],
    [112, 2, 4, 6, 8, 10, 12, 14, 18, 20, 22, 24, 26, 28, 30, 34, 36, 38, 40, 42, 44, 46, 50, 52, 54, 56, 58, 60, 62, 66, 68, 70, 72, 74, 76, 78, 82, 84, 86, 88, 90, 92, 94, 98, 100, 102, 104, 106, 108, 110, 114, 116, 118, 120, 122, 124, 126, 131, 133, 135, 137, 139, 141, 143, 147, 149, 151, 153, 155, 157, 159, 163, 165, 167, 169, 171, 173, 175, 179, 181, 183, 185, 187, 189, 191, 195, 197, 199, 201, 203, 205, 207, 211, 213, 215, 217, 219, 221, 223, 227, 229, 231, 233, 235, 237, 239, 243, 245, 247, 249, 251, 253, 255],
    [111, 2, 4, 6, 8, 10, 12, 14, 18, 20, 22, 24, 26, 28, 30, 34, 36, 38, 40, 42, 44, 46, 50, 52, 54, 56, 58, 60, 62, 66, 68, 70, 72, 74, 76, 78, 82, 84, 86, 88, 90, 92, 94, 98, 100, 102, 104, 106, 108, 110, 114, 116, 118, 120, 122, 124, 126, 133, 135, 137, 139, 141, 143, 147, 149, 151, 153, 155, 157, 159, 163, 165, 167, 169, 171, 173, 175, 179, 181, 183, 185, 187, 189, 191, 195, 197, 199, 201, 203, 205, 207, 211, 213, 215, 217, 219, 221, 223, 227, 229, 231, 233, 235, 237, 239, 243, 245, 247, 249, 251, 253, 255],
    [110, 2, 4, 6, 8, 10, 12, 14, 18, 20, 22, 24, 26, 28, 30, 34, 36, 38, 40, 42, 44, 46, 50, 52, 54, 56, 58, 60, 62, 66, 68, 70, 72, 74, 76, 78, 82, 84, 86, 88, 90, 92, 94, 98, 100, 102, 104, 106, 108, 110, 114, 116, 118, 120, 122, 124, 133, 135, 137, 139, 141, 143, 147, 149, 151, 153, 155, 157, 159, 163, 165, 167, 169, 171, 173, 175, 179, 181, 183, 185, 187, 189, 191, 195, 197, 199, 201, 203, 205, 207, 211, 213, 215, 217, 219, 221, 223, 227, 229, 231, 233, 235, 237, 239, 243, 245, 247, 249, 251, 253, 255],
    [109, 2, 4, 6, 8, 10, 12, 14, 18, 20, 22, 24, 26, 28, 30, 34, 36, 38, 40, 42, 44, 46, 50, 52, 54, 56, 58, 60, 62, 66, 68, 70, 72, 74, 76, 78, 82, 84, 86, 88, 90, 92, 94, 98, 100, 102, 104, 106, 108, 110, 114, 116, 118, 120, 122, 124, 133, 135, 137, 139, 141, 143, 147, 149, 151, 153, 155, 157, 159, 163, 165, 167, 169, 171, 173, 175, 179, 181, 183, 185, 187, 189, 191, 197, 199, 201, 203, 205, 207, 211, 213, 215, 217, 219, 221, 223, 227, 229, 231, 233, 235, 237, 239, 243, 245, 247, 249, 251, 253, 255],
    [108, 2, 4, 6, 8, 10, 12, 14, 18, 20, 22, 24, 26, 28, 30, 34, 36, 38, 40, 42, 44, 46, 50, 52, 54, 56, 58, 60, 66, 68, 70, 72, 74, 76, 78, 82, 84, 86, 88, 90, 92, 94, 98, 100, 102, 104, 106, 108, 110, 114, 116, 118, 120, 122, 124, 133, 135, 137, 139, 141, 143, 147, 149, 151, 153, 155, 157, 159, 163, 165, 167, 169, 171, 173, 175, 179, 181, 183, 185, 187, 189, 191, 197, 199, 201, 203, 205, 207, 211, 213, 215, 217, 219, 221, 223, 227, 229, 231, 233, 235, 237, 239, 243, 245, 247, 249, 251, 253, 255],
    [107, 2, 4, 6, 8, 10, 12, 14, 18, 20, 22, 24, 26, 28, 30, 34, 36, 38, 40, 42, 44, 46, 50, 52, 54, 56, 58, 60, 66, 68, 70, 72, 74, 76, 78, 82, 84, 86, 88, 90, 92, 94, 98, 100, 102, 104, 106, 108, 110, 114, 116, 118, 120, 122, 124, 133, 135, 137, 139, 141, 143, 147, 149, 151, 153, 155, 157, 159, 165, 167, 169, 171, 173, 175, 179, 181, 183, 185, 187, 189, 191, 197, 199, 201, 203, 205, 207, 211, 213, 215, 217, 219, 221, 223, 227, 229, 231, 233, 235, 237, 239, 243, 245, 247, 249, 251, 253, 255],
    [106, 2, 4, 6, 8, 10, 12, 14, 18, 20, 22, 24, 26, 28, 30, 34, 36, 38, 40, 42, 44, 46, 50, 52, 54, 56, 58, 60, 66, 68, 70, 72, 74, 76, 78, 82, 84, 86, 88, 90, 92, 98, 100, 102, 104, 106, 108, 110, 114, 116, 118, 120, 122, 124, 133, 135, 137, 139, 141, 143, 147, 149, 151, 153, 155, 157, 159, 165, 167, 169, 171, 173, 175, 179, 181, 183, 185, 187, 189, 191, 197, 199, 201, 203, 205, 207, 211, 213, 215, 217, 219, 221, 223, 227, 229, 231, 233, 235, 237, 239, 243, 245, 247, 249, 251, 253, 255],
    [105, 2, 4, 6, 8, 10, 12, 14, 18, 20, 22, 24, 26, 28, 30, 34, 36, 38, 40, 42, 44, 46, 50, 52, 54, 56, 58, 60, 66, 68, 70, 72, 74, 76, 78, 82, 84, 86, 88, 90, 92, 98, 100, 102, 104, 106, 108, 110, 114, 116, 118, 120, 122, 124, 133, 135, 137, 139, 141, 143, 147, 149, 151, 153, 155, 157, 159, 165, 167, 169, 171, 173, 175, 179, 181, 183, 185, 187, 189, 191, 197, 199, 201, 203, 205, 207, 211, 213, 215, 217, 219, 221, 223, 229, 231, 233, 235, 237, 239, 243, 245, 247, 249, 251, 253, 255],
    [104, 2, 4, 6, 8, 10, 12, 14, 18, 20, 22, 24, 26, 28, 34, 36, 38, 40, 42, 44, 46, 50, 52, 54, 56, 58, 60, 66, 68, 70, 72, 74, 76, 78, 82, 84, 86, 88, 90, 92, 98, 100, 102, 104, 106, 108, 110, 114, 116, 118, 120, 122, 124, 133, 135, 137, 139, 141, 143, 147, 149, 151, 153, 155, 157, 159, 165, 167, 169, 171, 173, 175, 179, 181, 183, 185, 187, 189, 191, 197, 199, 201, 203, 205, 207, 211, 213, 215, 217, 219, 221, 223, 229, 231, 233, 235, 237, 239, 243, 245, 247, 249, 251, 253, 255],
    [103, 2, 4, 6, 8, 10, 12, 14, 18, 20, 22, 24, 26, 28, 34, 36, 38, 40, 42, 44, 46, 50, 52, 54, 56, 58, 60, 66, 68, 70, 72, 74, 76, 78, 82, 84, 86, 88, 90, 92, 98, 100, 102, 104, 106, 108, 110, 114, 116, 118, 120, 122, 124, 133, 135, 137, 139, 141, 143, 149, 151, 153, 155, 157, 159, 165, 167, 169, 171, 173, 175, 179, 181, 183, 185, 187, 189, 191, 197, 199, 201, 203, 205, 207, 211, 213, 215, 217, 219, 221, 223, 229, 231, 233, 235, 237, 239, 243, 245, 247, 249, 251, 253, 255],
    [102, 2, 4, 6, 8, 10, 12, 14, 18, 20, 22, 24, 26, 28, 34, 36, 38, 40, 42, 44, 46, 50, 52, 54, 56, 58, 60, 66, 68, 70, 72, 74, 76, 78, 82, 84, 86, 88, 90, 92, 98, 100, 102, 104, 106, 108, 114, 116, 118, 120, 122, 124, 133, 135, 137, 139, 141, 143, 149, 151, 153, 155, 157, 159, 165, 167, 169, 171, 173, 175, 179, 181, 183, 185, 187, 189, 191, 197, 199, 201, 203, 205, 207, 211, 213, 215, 217, 219, 221, 223, 229, 231, 233, 235, 237, 239, 243, 245, 247, 249, 251, 253, 255],
    [101, 2, 4, 6, 8, 10, 12, 14, 18, 20, 22, 24, 26, 28, 34, 36, 38, 40, 42, 44, 46, 50, 52, 54, 56, 58, 60, 66, 68, 70, 72, 74, 76, 78, 82, 84, 86, 88, 90, 92, 98, 100, 102, 104, 106, 108, 114, 116, 118, 120, 122, 124, 133, 135, 137, 139, 141, 143, 149, 151, 153, 155, 157, 159, 165, 167, 169, 171, 173, 175, 179, 181, 183, 185, 187, 189, 191, 197, 199, 201, 203, 205, 207, 213, 215, 217, 219, 221, 223, 229, 231, 233, 235, 237, 239, 243, 245, 247, 249, 251, 253, 255],
    [100, 2, 4, 6, 8, 10, 12, 14, 18, 20, 22, 24, 26, 28, 34, 36, 38, 40, 42, 44, 50, 52, 54, 56, 58, 60, 66, 68, 70, 72, 74, 76, 78, 82, 84, 86, 88, 90, 92, 98, 100, 102, 104, 106, 108, 114, 116, 118, 120, 122, 124, 133, 135, 137, 139, 141, 143, 149, 151, 153, 155, 157, 159, 165, 167, 169, 171, 173, 175, 179, 181, 183, 185, 187, 189, 191, 197, 199, 201, 203, 205, 207, 213, 215, 217, 219, 221, 223, 229, 231, 233, 235, 237, 239, 243, 245, 247, 249, 251, 253, 255],
    [99, 2, 4, 6, 8, 10, 12, 14, 18, 20, 22, 24, 26, 28, 34, 36, 38, 40, 42, 44, 50, 52, 54, 56, 58, 60, 66, 68, 70, 72, 74, 76, 78, 82, 84, 86, 88, 90, 92, 98, 100, 102, 104, 106, 108, 114, 116, 118, 120, 122, 124, 133, 135, 137, 139, 141, 143, 149, 151, 153, 155, 157, 159, 165, 167, 169, 171, 173, 175, 181, 183, 185, 187, 189, 191, 197, 199, 201, 203, 205, 207, 213, 215, 217, 219, 221, 223, 229, 231, 233, 235, 237, 239, 243, 245, 247, 249, 251, 253, 255],
    [98, 2, 4, 6, 8, 10, 12, 14, 18, 20, 22, 24, 26, 28, 34, 36, 38, 40, 42, 44, 50, 52, 54, 56, 58, 60, 66, 68, 70, 72, 74, 76, 82, 84, 86, 88, 90, 92, 98, 100, 102, 104, 106, 108, 114, 116, 118, 120, 122, 124, 133, 135, 137, 139, 141, 143, 149, 151, 153, 155, 157, 159, 165, 167, 169, 171, 173, 175, 181, 183, 185, 187, 189, 191, 197, 199, 201, 203, 205, 207, 213, 215, 217, 219, 221, 223, 229, 231, 233, 235, 237, 239, 243, 245, 247, 249, 251, 253, 255],
    [97, 2, 4, 6, 8, 10, 12, 14, 18, 20, 22, 24, 26, 28, 34, 36, 38, 40, 42, 44, 50, 52, 54, 56, 58, 60, 66, 68, 70, 72, 74, 76, 82, 84, 86, 88, 90, 92, 98, 100, 102, 104, 106, 108, 114, 116, 118, 120, 122, 124, 133, 135, 137, 139, 141, 143, 149, 151, 153, 155, 157, 159, 165, 167, 169, 171, 173, 175, 181, 183, 185, 187, 189, 191, 197, 199, 201, 203, 205, 207, 213, 215, 217, 219, 221, 223, 229, 231, 233, 235, 237, 239, 245, 247, 249, 251, 253, 255],
    [96, 2, 4, 6, 8, 10, 12, 18, 20, 22, 24, 26, 28, 34, 36, 38, 40, 42, 44, 50, 52, 54, 56, 58, 60, 66, 68, 70, 72, 74, 76, 82, 84, 86, 88, 90, 92, 98, 100, 102, 104, 106, 108, 114, 116, 118, 120, 122, 124, 133, 135, 137, 139, 141, 143, 149, 151, 153, 155, 157, 159, 165, 167, 169, 171, 173, 175, 181, 183, 185, 187, 189, 191, 197, 199, 201, 203, 205, 207, 213, 215, 217, 219, 221, 223, 229, 231, 233, 235, 237, 239, 245, 247, 249, 251, 253, 255],
    [95, 2, 4, 6, 8, 10, 12, 18, 20, 22, 24, 26, 28, 34, 36, 38, 40, 42, 44, 50, 52, 54, 56, 58, 60, 66, 68, 70, 72, 74, 76, 82, 84, 86, 88, 90, 92, 98, 100, 102, 104, 106, 108, 114, 116, 118, 120, 122, 124, 135, 137, 139, 141, 143, 149, 151, 153, 155, 157, 159, 165, 167, 169, 171, 173, 175, 181, 183, 185, 187, 189, 191, 197, 199, 201, 203, 205, 207, 213, 215, 217, 219, 221, 223, 229, 231, 233, 235, 237, 239, 245, 247, 249, 251, 253, 255],
    [94, 2, 4, 6, 8, 10, 12, 18, 20, 22, 24, 26, 28, 34, 36, 38, 40, 42, 44, 50, 52, 54, 56, 58, 60, 66, 68, 70, 72, 74, 76, 82, 84, 86, 88, 90, 92, 98, 100, 102, 104, 106, 108, 114, 116, 118, 120, 122, 135, 137, 139, 141, 143, 149, 151, 153, 155, 157, 159, 165, 167, 169, 171, 173, 175, 181, 183, 185, 187, 189, 191, 197, 199, 201, 203, 205, 207, 213, 215, 217, 219, 221, 223, 229, 231, 233, 235, 237, 239, 245, 247, 249, 251, 253, 255],
    [93, 2, 4, 6, 8, 10, 12, 18, 20, 22, 24, 26, 28, 34, 36, 38, 40, 42, 44, 50, 52, 54, 56, 58, 60, 66, 68, 70, 72, 74, 76, 82, 84, 86, 88, 90, 92, 98, 100, 102, 104, 106, 108, 114, 116, 118, 120, 122, 135, 137, 139, 141, 143, 149, 151, 153, 155, 157, 159, 165, 167, 169, 171, 173, 175, 181, 183, 185, 187, 189, 191, 199, 201, 203, 205, 207, 213, 215, 217, 219, 221, 223, 229, 231, 233, 235, 237, 239, 245, 247, 249, 251, 253, 255],
    [92, 2, 4, 6, 8, 10, 12, 18, 20, 22, 24, 26, 28, 34, 36, 38, 40, 42, 44, 50, 52, 54, 56, 58, 66, 68, 70, 72, 74, 76, 82, 84, 86, 88, 90, 92, 98, 100, 102, 104, 106, 108, 114, 116, 118, 120, 122, 135, 137, 139, 141, 143, 149, 151, 153, 155, 157, 159, 165, 167, 169, 171, 173, 175, 181, 183, 185, 187, 189, 191, 199, 201, 203, 205, 207, 213, 215, 217, 219, 221, 223, 229, 231, 233, 235, 237, 239, 245, 247, 249, 251, 253, 255],
    [91, 2, 4, 6, 8, 10, 12, 18, 20, 22, 24, 26, 28, 34, 36, 38, 40, 42, 44, 50, 52, 54, 56, 58, 66, 68, 70, 72, 74, 76, 82, 84, 86, 88, 90, 92, 98, 100, 102, 104, 106, 108, 114, 116, 118, 120, 122, 135, 137, 139, 141, 143, 149, 151, 153, 155, 157, 159, 167, 169, 171, 173, 175, 181, 183, 185, 187, 189, 191, 199, 201, 203, 205, 207, 213, 215, 217, 219, 221, 223, 229, 231, 233, 235, 237, 239, 245, 247, 249, 251, 253, 255],
    [90, 2, 4, 6, 8, 10, 12, 18, 20, 22, 24, 26, 28, 34, 36, 38, 40, 42, 44, 50, 52, 54, 56, 58, 66, 68, 70, 72, 74, 76, 82, 84, 86, 88, 90, 98, 100, 102, 104, 106, 108, 114, 116, 118, 120, 122, 135, 137, 139, 141, 143, 149, 151, 153, 155, 157, 159, 167, 169, 171, 173, 175, 181, 183, 185, 187, 189, 191, 199, 201, 203, 205, 207, 213, 215, 217, 219, 221, 223, 229, 231, 233, 235, 237, 239, 245, 247, 249, 251, 253, 255],
    [89, 2, 4, 6, 8, 10, 12, 18, 20, 22, 24, 26, 28, 34, 36, 38, 40, 42, 44, 50, 52, 54, 56, 58, 66, 68, 70, 72, 74, 76, 82, 84, 86, 88, 90, 98, 100, 102, 104, 106, 108, 114, 116, 118, 120, 122, 135, 137, 139, 141, 143, 149, 151, 153, 155, 157, 159, 167, 169, 171, 173, 175, 181, 183, 185, 187, 189, 191, 199, 201, 203, 205, 207, 213, 215, 217, 219, 221, 223, 231, 233, 235, 237, 239, 245, 247, 249, 251, 253, 255],
    [88, 2, 4, 6, 8, 10, 12, 18, 20, 22, 24, 26, 34, 36, 38, 40, 42, 44, 50, 52, 54, 56, 58, 66, 68, 70, 72, 74, 76, 82, 84, 86, 88, 90, 98, 100, 102, 104, 106, 108, 114, 116, 118, 120, 122, 135, 137, 139, 141, 143, 149, 151, 153, 155, 157, 159, 167, 169, 171, 173, 175, 181, 183, 185, 187, 189, 191, 199, 201, 203, 205, 207, 213, 215, 217, 219, 221, 223, 231, 233, 235, 237, 239, 245, 247, 249, 251, 253, 255],
    [87, 2, 4, 6, 8, 10, 12, 18, 20, 22, 24, 26, 34, 36, 38, 40, 42, 44, 50, 52, 54, 56, 58, 66, 68, 70, 72, 74, 76, 82, 84, 86, 88, 90, 98, 100, 102, 104, 106, 108, 114, 116, 118, 120, 122, 135, 137, 139, 141, 143, 151, 153, 155, 157, 159, 167, 169, 171, 173, 175, 181, 183, 185, 187, 189, 191, 199, 201, 203, 205, 207, 213, 215, 217, 219, 221, 223, 231, 233, 235, 237, 239, 245, 247, 249, 251, 253, 255],
    [86, 2, 4, 6, 8, 10, 12, 18, 20, 22, 24, 26, 34, 36, 38, 40, 42, 44, 50, 52, 54, 56, 58, 66, 68, 70, 72, 74, 76, 82, 84, 86, 88, 90, 98, 100, 102, 104, 106, 114, 116, 118, 120, 122, 135, 137, 139, 141, 143, 151, 153, 155, 157, 159, 167, 169, 171, 173, 175, 181, 183, 185, 187, 189, 191, 199, 201, 203, 205, 207, 213, 215, 217, 219, 221, 223, 231, 233, 235, 237, 239, 245, 247, 249, 251, 253, 255],
    [85, 2, 4, 6, 8, 10, 12, 18, 20, 22, 24, 26, 34, 36, 38, 40, 42, 44, 50, 52, 54, 56, 58, 66, 68, 70, 72, 74, 76, 82, 84, 86, 88, 90, 98, 100, 102, 104, 106, 114, 116, 118, 120, 122, 135, 137, 139, 141, 143, 151, 153, 155, 157, 159, 167, 169, 171, 173, 175, 181, 183, 185, 187, 189, 191, 199, 201, 203, 205, 207, 215, 217, 219, 221, 223, 231, 233, 235, 237, 239, 245, 247, 249, 251, 253, 255],
    [84, 2, 4, 6, 8, 10, 12, 18, 20, 22, 24, 26, 34, 36, 38, 40, 42, 50, 52, 54, 56, 58, 66, 68, 70, 72, 74, 76, 82, 84, 86, 88, 90, 98, 100, 102, 104, 106, 114, 116, 118, 120, 122, 135, 137, 139, 141, 143, 151, 153, 155, 157, 159, 167, 169, 171, 173, 175, 181, 183, 185, 187, 189, 191, 199, 201, 203, 205, 207, 215, 217, 219, 221, 223, 231, 233, 235, 237, 239, 245, 247, 249, 251, 253, 255],
    [83, 2, 4, 6, 8, 10, 12, 18, 20, 22, 24, 26, 34, 36, 38, 40, 42, 50, 52, 54, 56, 58, 66, 68, 70, 72, 74, 76, 82, 84, 86, 88, 90, 98, 100, 102, 104, 106, 114, 116, 118, 120, 122, 135, 137, 139, 141, 143, 151, 153, 155, 157, 159, 167, 169, 171, 173, 175, 183, 185, 187, 189, 191, 199, 201, 203, 205, 207, 215, 217, 219, 221, 223, 231, 233, 235, 237, 239, 245, 247, 249, 251, 253, 255],
    [82, 2, 4, 6, 8, 10, 12, 18, 20, 22, 24, 26, 34, 36, 38, 40, 42, 50, 52, 54, 56, 58, 66, 68, 70, 72, 74, 82, 84, 86, 88, 90, 98, 100, 102, 104, 106, 114, 116, 118, 120, 122, 135, 137, 139, 141, 143, 151, 153, 155, 157, 159, 167, 169, 171, 173, 175, 183, 185, 187, 189, 191, 199, 201, 203, 205, 207, 215, 217, 219, 221, 223, 231, 233, 235, 237, 239, 245, 247, 249, 251, 253, 255],
    [81, 2, 4, 6, 8, 10, 12, 18, 20, 22, 24, 26, 34, 36, 38, 40, 42, 50, 52, 54, 56, 58, 66, 68, 70, 72, 74, 82, 84, 86, 88, 90, 98, 100, 102, 104, 106, 114, 116, 118, 120, 122, 135, 137, 139, 141, 143, 151, 153, 155, 157, 159, 167, 169, 171, 173, 175, 183, 185, 187, 189, 191, 199, 201, 203, 205, 207, 215, 217, 219, 221, 223, 231, 233, 235, 237, 239, 247, 249, 251, 253, 255],
    [80, 2, 4, 6, 8, 10, 18, 20, 22, 24, 26, 34, 36, 38, 40, 42, 50, 52, 54, 56, 58, 66, 68, 70, 72, 74, 82, 84, 86, 88, 90, 98, 100, 102, 104, 106, 114, 116, 118, 120, 122, 135, 137, 139, 141, 143, 151, 153, 155, 157, 159, 167, 169, 171, 173, 175, 183, 185, 187, 189, 191, 199, 201, 203, 205, 207, 215, 217, 219, 221, 223, 231, 233, 235, 237, 239, 247, 249, 251, 253, 255],
    [79, 2, 4, 6, 8, 10, 18, 20, 22, 24, 26, 34, 36, 38, 40, 42, 50, 52, 54, 56, 58, 66, 68, 70, 72, 74, 82, 84, 86, 88, 90, 98, 100, 102, 104, 106, 114, 116, 118, 120, 122, 137, 139, 141, 143, 151, 153, 155, 157, 159, 167, 169, 171, 173, 175, 183, 185, 187, 189, 191, 199, 201, 203, 205, 207, 215, 217, 219, 221, 223, 231, 233, 235, 237, 239, 247, 249, 251, 253, 255],
    [78, 2, 4, 6, 8, 10, 18, 20, 22, 24, 26, 34, 36, 38, 40, 42, 50, 52, 54, 56, 58, 66, 68, 70, 72, 74, 82, 84, 86, 88, 90, 98, 100, 102, 104, 106, 114, 116, 118, 120, 137, 139, 141, 143, 151, 153, 155, 157, 159, 167, 169, 171, 173, 175, 183, 185, 187, 189, 191, 199, 201, 203, 205, 207, 215, 217, 219, 221, 223, 231, 233, 235, 237, 239, 247, 249, 251, 253, 255],
    [77, 2, 4, 6, 8, 10, 18, 20, 22, 24, 26, 34, 36, 38, 40, 42, 50, 52, 54, 56, 58, 66, 68, 70, 72, 74, 82, 84, 86, 88, 90, 98, 100, 102, 104, 106, 114, 116, 118, 120, 137, 139, 141, 143, 151, 153, 155, 157, 159, 167, 169, 171, 173, 175, 183, 185, 187, 189, 191, 201, 203, 205, 207, 215, 217, 219, 221, 223, 231, 233, 235, 237, 239, 247, 249, 251, 253, 255],
    [76, 2, 4, 6, 8, 10, 18, 20, 22, 24, 26, 34, 36, 38, 40, 42, 50, 52, 54, 56, 66, 68, 70, 72, 74, 82, 84, 86, 88, 90, 98, 100, 102, 104, 106, 114, 116, 118, 120, 137, 139, 141, 143, 151, 153, 155, 157, 159, 167, 169, 171, 173, 175, 183, 185, 187, 189, 191, 201, 203, 205, 207, 215, 217, 219, 221, 223, 231, 233, 235, 237, 239, 247, 249, 251, 253, 255],
    [75, 2, 4, 6, 8, 10, 18, 20, 22, 24, 26, 34, 36, 38, 40, 42, 50, 52, 54, 56, 66, 68, 70, 72, 74, 82, 84, 86, 88, 90, 98, 100, 102, 104, 106, 114, 116, 118, 120, 137, 139, 141, 143, 151, 153, 155, 157, 159, 169, 171, 173, 175, 183, 185, 187, 189, 191, 201, 203, 205, 207, 215, 217, 219, 221, 223, 231, 233, 235, 237, 239, 247, 249, 251, 253, 255],
    [74, 2, 4, 6, 8, 10, 18, 20, 22, 24, 26, 34, 36, 38, 40, 42, 50, 52, 54, 56, 66, 68, 70, 72, 74, 82, 84, 86, 88, 98, 100, 102, 104, 106, 114, 116, 118, 120, 137, 139, 141, 143, 151, 153, 155, 157, 159, 169, 171, 173, 175, 183, 185, 187, 189, 191, 201, 203, 205, 207, 215, 217, 219, 221, 223, 231, 233, 235, 237, 239, 247, 249, 251, 253, 255],
    [73, 2, 4, 6, 8, 10, 18, 20, 22, 24, 26, 34, 36, 38, 40, 42, 50, 52, 54, 56, 66, 68, 70, 72, 74, 82, 84, 86, 88, 98, 100, 102, 104, 106, 114, 116, 118, 120, 137, 139, 141, 143, 151, 153, 155, 157, 159, 169, 171, 173, 175, 183, 185, 187, 189, 191, 201, 203, 205, 207, 215, 217, 219, 221, 223, 233, 235, 237, 239, 247, 249, 251, 253, 255],
    [72, 2, 4, 6, 8, 10, 18, 20, 22, 24, 34, 36, 38, 40, 42, 50, 52, 54, 56, 66, 68, 70, 72, 74, 82, 84, 86, 88, 98, 100, 102, 104, 106, 114, 116, 118, 120, 137, 139, 141, 143, 151, 153, 155, 157, 159, 169, 171, 173, 175, 183, 185, 187, 189, 191, 201, 203, 205, 207, 215, 217, 219, 221, 223, 233, 235, 237, 239, 247, 249, 251, 253, 255],
    [71, 2, 4, 6, 8, 10, 18, 20, 22, 24, 34, 36, 38, 40, 42, 50, 52, 54, 56, 66, 68, 70, 72, 74, 82, 84, 86, 88, 98, 100, 102, 104, 106, 114, 116, 118, 120, 137, 139, 141, 143, 153, 155, 157, 159, 169, 171, 173, 175, 183, 185, 187, 189, 191, 201, 203, 205, 207, 215, 217, 219, 221, 223, 233, 235, 237, 239, 247, 249, 251, 253, 255],
    [70, 2, 4, 6, 8, 10, 18, 20, 22, 24, 34, 36, 38, 40, 42, 50, 52, 54, 56, 66, 68, 70, 72, 74, 82, 84, 86, 88, 98, 100, 102, 104, 114, 116, 118, 120, 137, 139, 141, 143, 153, 155, 157, 159, 169, 171, 173, 175, 183, 185, 187, 189, 191, 201, 203, 205, 207, 215, 217, 219, 221, 223, 233, 235, 237, 239, 247, 249, 251, 253, 255],
    [69, 2, 4, 6, 8, 10, 18, 20, 22, 24, 34, 36, 38, 40, 42, 50, 52, 54, 56, 66, 68, 70, 72, 74, 82, 84, 86, 88, 98, 100, 102, 104, 114, 116, 118, 120, 137, 139, 141, 143, 153, 155, 157, 159, 169, 171, 173, 175, 183, 185, 187, 189, 191, 201, 203, 205, 207, 217, 219, 221, 223, 233, 235, 237, 239, 247, 249, 251, 253, 255],
    [68, 2, 4, 6, 8, 10, 18, 20, 22, 24, 34, 36, 38, 40, 50, 52, 54, 56, 66, 68, 70, 72, 74, 82, 84, 86, 88, 98, 100, 102, 104, 114, 116, 118, 120, 137, 139, 141, 143, 153, 155, 157, 159, 169, 171, 173, 175, 183, 185, 187, 189, 191, 201, 203, 205, 207, 217, 219, 221, 223, 233, 235, 237, 239, 247, 249, 251, 253, 255],
    [67, 2, 4, 6, 8, 10, 18, 20, 22, 24, 34, 36, 38, 40, 50, 52, 54, 56, 66, 68, 70, 72, 74, 82, 84, 86, 88, 98, 100, 102, 104, 114, 116, 118, 120, 137, 139, 141, 143, 153, 155, 157, 159, 169, 171, 173, 175, 185, 187, 189, 191, 201, 203, 205, 207, 217, 219, 221, 223, 233, 235, 237, 239, 247, 249, 251, 253, 255],
    [66, 2, 4, 6, 8, 10, 18, 20, 22, 24, 34, 36, 38, 40, 50, 52, 54, 56, 66, 68, 70, 72, 82, 84, 86, 88, 98, 100, 102, 104, 114, 116, 118, 120, 137, 139, 141, 143, 153, 155, 157, 159, 169, 171, 173, 175, 185, 187, 189, 191, 201, 203, 205, 207, 217, 219, 221, 223, 233, 235, 237, 239, 247, 249, 251, 253, 255],
    [65, 2, 4, 6, 8, 10, 18, 20, 22, 24, 34, 36, 38, 40, 50, 52, 54, 56, 66, 68, 70, 72, 82, 84, 86, 88, 98, 100, 102, 104, 114, 116, 118, 120, 137, 139, 141, 143, 153, 155, 157, 159, 169, 171, 173, 175, 185, 187, 189, 191, 201, 203, 205, 207, 217, 219, 221, 223, 233, 235, 237, 239, 249, 251, 253, 255],
    [64, 2, 4, 6, 8, 18, 20, 22, 24, 34, 36, 38, 40, 50, 52, 54, 56, 66, 68, 70, 72, 82, 84, 86, 88, 98, 100, 102, 104, 114, 116, 118, 120, 137, 139, 141, 143, 153, 155, 157, 159, 169, 171, 173, 175, 185, 187, 189, 191, 201, 203, 205, 207, 217, 219, 221, 223, 233, 235, 237, 239, 249, 251, 253, 255],
    [63, 2, 4, 6, 8, 18, 20, 22, 24, 34, 36, 38, 40, 50, 52, 54, 56, 66, 68, 70, 72, 82, 84, 86, 88, 98, 100, 102, 104, 114, 116, 118, 120, 139, 141, 143, 153, 155, 157, 159, 169, 171, 173, 175, 185, 187, 189, 191, 201, 203, 205, 207, 217, 219, 221, 223, 233, 235, 237, 239, 249, 251, 253, 255],
    [62, 2, 4, 6, 8, 18, 20, 22, 24, 34, 36, 38, 40, 50, 52, 54, 56, 66, 68, 70, 72, 82, 84, 86, 88, 98, 100, 102, 104, 114, 116, 118, 139, 141, 143, 153, 155, 157, 159, 169, 171, 173, 175, 185, 187, 189, 191, 201, 203, 205, 207, 217, 219, 221, 223, 233, 235, 237, 239, 249, 251, 253, 255],
    [61, 2, 4, 6, 8, 18, 20, 22, 24, 34, 36, 38, 40, 50, 52, 54, 56, 66, 68, 70, 72, 82, 84, 86, 88, 98, 100, 102, 104, 114, 116, 118, 139, 141, 143, 153, 155, 157, 159, 169, 171, 173, 175, 185, 187, 189, 191, 203, 205, 207, 217, 219, 221, 223, 233, 235, 237, 239, 249, 251, 253, 255],
    [60, 2, 4, 6, 8, 18, 20, 22, 24, 34, 36, 38, 40, 50, 52, 54, 66, 68, 70, 72, 82, 84, 86, 88, 98, 100, 102, 104, 114, 116, 118, 139, 141, 143, 153, 155, 157, 159, 169, 171, 173, 175, 185, 187, 189, 191, 203, 205, 207, 217, 219, 221, 223, 233, 235, 237, 239, 249, 251, 253, 255],
    [59, 2, 4, 6, 8, 18, 20, 22, 24, 34, 36, 38, 40, 50, 52, 54, 66, 68, 70, 72, 82, 84, 86, 88, 98, 100, 102, 104, 114, 116, 118, 139, 141, 143, 153, 155, 157, 159, 171, 173, 175, 185, 187, 189, 191, 203, 205, 207, 217, 219, 221, 223, 233, 235, 237, 239, 249, 251, 253, 255],
    [58, 2, 4, 6, 8, 18, 20, 22, 24, 34, 36, 38, 40, 50, 52, 54, 66, 68, 70, 72, 82, 84, 86, 98, 100, 102, 104, 114, 116, 118, 139, 141, 143, 153, 155, 157, 159, 171, 173, 175, 185, 187, 189, 191, 203, 205, 207, 217, 219, 221, 223, 233, 235, 237, 239, 249, 251, 253, 255],
    [57, 2, 4, 6, 8, 18, 20, 22, 24, 34, 36, 38, 40, 50, 52, 54, 66, 68, 70, 72, 82, 84, 86, 98, 100, 102, 104, 114, 116, 118, 139, 141, 143, 153, 155, 157, 159, 171, 173, 175, 185, 187, 189, 191, 203, 205, 207, 217, 219, 221, 223, 235, 237, 239, 249, 251, 253, 255],
    [56, 2, 4, 6, 8, 18, 20, 22, 34, 36, 38, 40, 50, 52, 54, 66, 68, 70, 72, 82, 84, 86, 98, 100, 102, 104, 114, 116, 118, 139, 141, 143, 153, 155, 157, 159, 171, 173, 175, 185, 187, 189, 191, 203, 205, 207, 217, 219, 221, 223, 235, 237, 239, 249, 251, 253, 255],
    [55, 2, 4, 6, 8, 18, 20, 22, 34, 36, 38, 40, 50, 52, 54, 66, 68, 70, 72, 82, 84, 86, 98, 100, 102, 104, 114, 116, 118, 139, 141, 143, 155, 157, 159, 171, 173, 175, 185, 187, 189, 191, 203, 205, 207, 217, 219, 221, 223, 235, 237, 239, 249, 251, 253, 255],
    [54, 2, 4, 6, 8, 18, 20, 22, 34, 36, 38, 40, 50, 52, 54, 66, 68, 70, 72, 82, 84, 86, 98, 100, 102, 114, 116, 118, 139, 141, 143, 155, 157, 159, 171, 173, 175, 185, 187, 189, 191, 203, 205, 207, 217, 219, 221, 223, 235, 237, 239, 249, 251, 253, 255],
    [53, 2, 4, 6, 8, 18, 20, 22, 34, 36, 38, 40, 50, 52, 54, 66, 68, 70, 72, 82, 84, 86, 98, 100, 102, 114, 116, 118, 139, 141, 143, 155, 157, 159, 171, 173, 175, 185, 187, 189, 191, 203, 205, 207, 219, 221, 223, 235, 237, 239, 249, 251, 253, 255],
    [52, 2, 4, 6, 8, 18, 20, 22, 34, 36, 38, 50, 52, 54, 66, 68, 70, 72, 82, 84, 86, 98, 100, 102, 114, 116, 118, 139, 141, 143, 155, 157, 159, 171, 173, 175, 185, 187, 189, 191, 203, 205, 207, 219, 221, 223, 235, 237, 239, 249, 251, 253, 255],
    [51, 2, 4, 6, 8, 18, 20, 22, 34, 36, 38, 50, 52, 54, 66, 68, 70, 72, 82, 84, 86, 98, 100, 102, 114, 116, 118, 139, 141, 143, 155, 157, 159, 171, 173, 175, 187, 189, 191, 203, 205, 207, 219, 221, 223, 235, 237, 239, 249, 251, 253, 255],
    [50, 2, 4, 6, 8, 18, 20, 22, 34, 36, 38, 50, 52, 54, 66, 68, 70, 82, 84, 86, 98, 100, 102, 114, 116, 118, 139, 141, 143, 155, 157, 159, 171, 173, 175, 187, 189, 191, 203, 205, 207, 219, 221, 223, 235, 237, 239, 249, 251, 253, 255],
    [49, 2, 4, 6, 8, 18, 20, 22, 34, 36, 38, 50, 52, 54, 66, 68, 70, 82, 84, 86, 98, 100, 102, 114, 116, 118, 139, 141, 143, 155, 157, 159, 171, 173, 175, 187, 189, 191, 203, 205, 207, 219, 221, 223, 235, 237, 239, 251, 253, 255],
    [48, 2, 4, 6, 18, 20, 22, 34, 36, 38, 50, 52, 54, 66, 68, 70, 82, 84, 86, 98, 100, 102, 114, 116, 118, 139, 141, 143, 155, 157, 159, 171, 173, 175, 187, 189, 191, 203, 205, 207, 219, 221, 223, 235, 237, 239, 251, 253, 255],
    [47, 2, 4, 6, 18, 20, 22, 34, 36, 38, 50, 52, 54, 66, 68, 70, 82, 84, 86, 98, 100, 102, 114, 116, 118, 141, 143, 155, 157, 159, 171, 173, 175, 187, 189, 191, 203, 205, 207, 219, 221, 223, 235, 237, 239, 251, 253, 255],
    [46, 2, 4, 6, 18, 20, 22, 34, 36, 38, 50, 52, 54, 66, 68, 70, 82, 84, 86, 98, 100, 102, 114, 116, 141, 143, 155, 157, 159, 171, 173, 175, 187, 189, 191, 203, 205, 207, 219, 221, 223, 235, 237, 239, 251, 253, 255],
    [45, 2, 4, 6, 18, 20, 22, 34, 36, 38, 50, 52, 54, 66, 68, 70, 82, 84, 86, 98, 100, 102, 114, 116, 141, 143, 155, 157, 159, 171, 173, 175, 187, 189, 191, 205, 207, 219, 221, 223, 235, 237, 239, 251, 253, 255],
    [44, 2, 4, 6, 18, 20, 22, 34, 36, 38, 50, 52, 66, 68, 70, 82, 84, 86, 98, 100, 102, 114, 116, 141, 143, 155, 157, 159, 171, 173, 175, 187, 189, 191, 205, 207, 219, 221, 223, 235, 237, 239, 251, 253, 255],
    [43, 2, 4, 6, 18, 20, 22, 34, 36, 38, 50, 52, 66, 68, 70, 82, 84, 86, 98, 100, 102, 114, 116, 141, 143, 155, 157, 159, 173, 175, 187, 189, 191, 205, 207, 219, 221, 223, 235, 237, 239, 251, 253, 255],
    [42, 2, 4, 6, 18, 20, 22, 34, 36, 38, 50, 52, 66, 68, 70, 82, 84, 98, 100, 102, 114, 116, 141, 143, 155, 157, 159, 173, 175, 187, 189, 191, 205, 207, 219, 221, 223, 235, 237, 239, 251, 253, 255],
    [41, 2, 4, 6, 18, 20, 22, 34, 36, 38, 50, 52, 66, 68, 70, 82, 84, 98, 100, 102, 114, 116, 141, 143, 155, 157, 159, 173, 175, 187, 189, 191, 205, 207, 219, 221, 223, 237, 239, 251, 253, 255],
    [40, 2, 4, 6, 18, 20, 34, 36, 38, 50, 52, 66, 68, 70, 82, 84, 98, 100, 102, 114, 116, 141, 143, 155, 157, 159, 173, 175, 187, 189, 191, 205, 207, 219, 221, 223, 237, 239, 251, 253, 255],
    [39, 2, 4, 6, 18, 20, 34, 36, 38, 50, 52, 66, 68, 70, 82, 84, 98, 100, 102, 114, 116, 141, 143, 157, 159, 173, 175, 187, 189, 191, 205, 207, 219, 221, 223, 237, 239, 251, 253, 255],
    [38, 2, 4, 6, 18, 20, 34, 36, 38, 50, 52, 66, 68, 70, 82, 84, 98, 100, 114, 116, 141, 143, 157, 159, 173, 175, 187, 189, 191, 205, 207, 219, 221, 223, 237, 239, 251, 253, 255],
    [37, 2, 4, 6, 18, 20, 34, 36, 38, 50, 52, 66, 68, 70, 82, 84, 98, 100, 114, 116, 141, 143, 157, 159, 173, 175, 187, 189, 191, 205, 207, 221, 223, 237, 239, 251, 253, 255],
    [36, 2, 4, 6, 18, 20, 34, 36, 50, 52, 66, 68, 70, 82, 84, 98, 100, 114, 116, 141, 143, 157, 159, 173, 175, 187, 189, 191, 205, 207, 221, 223, 237, 239, 251, 253, 255],
    [35, 2, 4, 6, 18, 20, 34, 36, 50, 52, 66, 68, 70, 82, 84, 98, 100, 114, 116, 141, 143, 157, 159, 173, 175, 189, 191, 205, 207, 221, 223, 237, 239, 251, 253, 255],
    [34, 2, 4, 6, 18, 20, 34, 36, 50, 52, 66, 68, 82, 84, 98, 100, 114, 116, 141, 143, 157, 159, 173, 175, 189, 191, 205, 207, 221, 223, 237, 239, 251, 253, 255],
    [33, 2, 4, 6, 18, 20, 34, 36, 50, 52, 66, 68, 82, 84, 98, 100, 114, 116, 141, 143, 157, 159, 173, 175, 189, 191, 205, 207, 221, 223, 237, 239, 253, 255],
    [32, 2, 4, 18, 20, 34, 36, 50, 52, 66, 68, 82, 84, 98, 100, 114, 116, 141, 143, 157, 159, 173, 175, 189, 191, 205, 207, 221, 223, 237, 239, 253, 255],
    [31, 2, 4, 18, 20, 34, 36, 50, 52, 66, 68, 82, 84, 98, 100, 114, 116, 143, 157, 159, 173, 175, 189, 191, 205, 207, 221, 223, 237, 239, 253, 255],
    [30, 2, 4, 18, 20, 34, 36, 50, 52, 66, 68, 82, 84, 98, 100, 114, 143, 157, 159, 173, 175, 189, 191, 205, 207, 221, 223, 237, 239, 253, 255],
    [29, 2, 4, 18, 20, 34, 36, 50, 52, 66, 68, 82, 84, 98, 100, 114, 143, 157, 159, 173, 175, 189, 191, 207, 221, 223, 237, 239, 253, 255],
    [28, 2, 4, 18, 20, 34, 36, 50, 66, 68, 82, 84, 98, 100, 114, 143, 157, 159, 173, 175, 189, 191, 207, 221, 223, 237, 239, 253, 255],
    [27, 2, 4, 18, 20, 34, 36, 50, 66, 68, 82, 84, 98, 100, 114, 143, 157, 159, 175, 189, 191, 207, 221, 223, 237, 239, 253, 255],
    [26, 2, 4, 18, 20, 34, 36, 50, 66, 68, 82, 98, 100, 114, 143, 157, 159, 175, 189, 191, 207, 221, 223, 237, 239, 253, 255],
    [25, 2, 4, 18, 20, 34, 36, 50, 66, 68, 82, 98, 100, 114, 143, 157, 159, 175, 189, 191, 207, 221, 223, 239, 253, 255],
    [24, 2, 4, 18, 34, 36, 50, 66, 68, 82, 98, 100, 114, 143, 157, 159, 175, 189, 191, 207, 221, 223, 239, 253, 255],
    [23, 2, 4, 18, 34, 36, 50, 66, 68, 82, 98, 100, 114, 143, 159, 175, 189, 191, 207, 221, 223, 239, 253, 255],
    [22, 2, 4, 18, 34, 36, 50, 66, 68, 82, 98, 114, 143, 159, 175, 189, 191, 207, 221, 223, 239, 253, 255],
    [21, 2, 4, 18, 34, 36, 50, 66, 68, 82, 98, 114, 143, 159, 175, 189, 191, 207, 223, 239, 253, 255],
    [20, 2, 4, 18, 34, 50, 66, 68, 82, 98, 114, 143, 159, 175, 189, 191, 207, 223, 239, 253, 255],
    [19, 2, 4, 18, 34, 50, 66, 68, 82, 98, 114, 143, 159, 175, 191, 207, 223, 239, 253, 255],
    [18, 2, 4, 18, 34, 50, 66, 82, 98, 114, 143, 159, 175, 191, 207, 223, 239, 253, 255],
    [17, 2, 4, 18, 34, 50, 66, 82, 98, 114, 143, 159, 175, 191, 207, 223, 239, 255],
    [16, 2, 18, 34, 50, 66, 82, 98, 114, 143, 159, 175, 191, 207, 223, 239, 255],
    [15, 2, 18, 34, 50, 66, 82, 98, 114, 159, 175, 191, 207, 223, 239, 255],
    [14, 2, 18, 34, 50, 66, 82, 98, 159, 175, 191, 207, 223, 239, 255],
    [13, 2, 18, 34, 50, 66, 82, 98, 159, 175, 191, 223, 239, 255],
    [12, 2, 18, 34, 66, 82, 98, 159, 175, 191, 223, 239, 255],
    [11, 2, 18, 34, 66, 82, 98, 159, 191, 223, 239, 255],
    [10, 2, 18, 34, 66, 98, 159, 191, 223, 239, 255],
    [9, 2, 18, 34, 66, 98, 159, 191, 223, 255],
    [8, 2, 34, 66, 98, 159, 191, 223, 255],
    [7, 2, 34, 66, 98, 191, 223, 255],
    [6, 2, 34, 66, 191, 223, 255],
    [5, 2, 34, 66, 191, 255],
    [4, 2, 66, 191, 255],
    [3, 2, 66, 255],
    [2, 2, 255],
    [1, 2],
    [0]
];


/* ==================================================================================
      gAryGameUser에 연동대회 상위 Rank Info를 채운다.
      gArySeedUser에 대회 신청 여부를 채운다.

      gAryGameUser와 gArySeedUser는 대회 자체가 틀리므로 playType이 단/복식 유무에 따라
      memIdx를 1개 혹은 같은 GroupId의 memberIdx 2개를 비교하여 같은지를 확인한다.

      gAryGameUser - fUse, SeedNo, Ranking, GameRequestGroupIDX, GameRequestPlayerIDX, MemberIDX, MemberName,
                     Team, TeamName, PrevTeam, PrevTeamName
      gArySeedUser - '0' As GameRanking, '0' As ReqGame, TourneyGroupIDX, MemberIDX, UserName, SEX, TEAM, TEAMNM
   ================================================================================== */
function FillRankInfoToAryReq(rAryReq, rArySeed, playType) {
    var len = 0,
        i = 0,
        rIdx = 0,
        idx = 0,
        sIdx1 = 0,
        sIdx2 = 0;
    if (rAryReq == null) return;

    if (playType == "B0020001") { // 단식
        len = rAryReq.length;
        for (i = 0; i < len; i++) {
            rIdx = checkSeedInfo(rArySeed, rAryReq[i][8])
            if (rIdx != -1) {
                // Ranking , Ranking 획득시 팀 정보 셋팅
                rAryReq[i][3] = rArySeed[rIdx][0];
                rAryReq[i][12] = rArySeed[rIdx][6];
                rAryReq[i][13] = rArySeed[rIdx][7];
            }
        }
    } else { // 복식
        len = rAryReq.length / 2;
        for (i = 0; i < len; i++) {
            idx = i * 2;
            rIdx = checkSeedInfoDbl(rArySeed, rAryReq[idx][8], rAryReq[idx + 1][8])
            if (rIdx != -1) {
                if (rAryReq[idx][8] == rArySeed[rIdx][3]) {
                    sIdx1 = rIdx, sIdx2 = rIdx + 1;
                } else {
                    sIdx1 = rIdx + 1, sIdx2 = rIdx;
                }

                // Ranking , Ranking 획득시 팀 정보 셋팅
                rAryReq[idx][3] = rArySeed[sIdx1][0];
                rAryReq[idx][12] = rArySeed[sIdx1][6];
                rAryReq[idx][13] = rArySeed[sIdx1][7];

                rAryReq[idx + 1][3] = rArySeed[sIdx2][0];
                rAryReq[idx + 1][12] = rArySeed[sIdx2][6];
                rAryReq[idx + 1][13] = rArySeed[sIdx2][7];
            }
        }
    }
}

/* ==================================================================================
      단식 - rArySeed에서 memIdx를 인자로 받아 이번대회 출전 여부를 체크한다.
   ================================================================================== */
function checkSeedInfo(rArySeed, memIdx) {
    var len = 0,
        i = 0;
    if (rArySeed == null) return -1;

    len = rArySeed.length;
    for (i = 0; i < len; i++) {
        if (rArySeed[i][0] && rArySeed[i][3] == memIdx) // Ranking Data가 있고 memIdx가 같다면 같은 사람
        {
            rArySeed[i][1] = 1 // 이번 대회에 출전한다.
            return i;
        }
    }

    return -1;
}

/* ==================================================================================
      복식 - rArySeed에서 memIdx1, memIdx2를 인자로 받아 이번대회 출전 여부를 체크한다.
   ================================================================================== */
function checkSeedInfoDbl(rArySeed, memIdx1, memIdx2) {
    var len = 0,
        i = 0,
        idx1;
    if (rArySeed == null) return -1;

    len = rArySeed.length / 2;
    for (i = 0; i < (len); i++) {
        idx1 = i * 2;
        if (rArySeed[idx1][0]) {
            if ((rArySeed[idx1][3] == memIdx1 && rArySeed[idx1 + 1][3] == memIdx2) ||
                (rArySeed[idx1 + 1][3] == memIdx2 && rArySeed[idx1][3] == memIdx1)) {
                rArySeed[idx1][1] = 1 // 이번 대회에 출전한다.
                rArySeed[idx1 + 1][1] = 1
                return idx1;
            }
        }
    }

    return -1;
}

/* ==================================================================================
      gArySeedUser에 Medal값을 채운다 .
      '0' As GameRanking, '0' As ReqGame, TourneyGroupIDX, MemberIDX, UserName, SEX, TEAM, TEAMNM

      aryMedal  -  TourneyGroupIDX, GameMedalIDX
   ================================================================================== */
function FillSeedMedal(nRank, rArySeed, rAryMedal) {
    var len = 0,
        i = 0,
        medalOrder = 0;
    if (rArySeed == null) return;

    len = rArySeed.length;
    for (i = 0; i < len; i++) {
        medalOrder = findMedalInfo(rAryMedal, rArySeed[i][2])
        if (medalOrder && nRank >= medalOrder) rArySeed[i][0] = medalOrder
    }
}

/* ==================================================================================
      gArySeedUser에 Rank값을 채운다 .
      '0' As GameRanking, '0' As ReqGame, TourneyGroupIDX, MemberIDX, UserName, SEX, TEAM, TEAMNM
   ================================================================================== */
function FillSeedRank(nRank, rArySeed, rAryRank8, rAryRank4) {
    var len = 0,
        i = 0;
    if (rArySeed == null) return;
    if (nRank <= 4) return;

    len = rArySeed.length;

    if (nRank <= 8) {
        // 기본 8강
        for (i = 0; i < len; i++) rArySeed[i][0] = 8

        // 4강 셋팅
        for (i = 0; i < len; i++) {
            if (findRankInfo(rAryRank4, rArySeed[i][2])) rArySeed[i][0] = 4
        }
    } else if (nRank <= 16) {
        // 기본 16강
        for (i = 0; i < len; i++) rArySeed[i][0] = 16

        // 8강 셋팅
        for (i = 0; i < len; i++) {
            if (findRankInfo(rAryRank8, rArySeed[i][2])) rArySeed[i][0] = 8
        }

        // 4강 셋팅
        for (i = 0; i < len; i++) {
            if (findRankInfo(rAryRank4, rArySeed[i][2])) rArySeed[i][0] = 4
        }
    }
}

/* ==================================================================================
      groupIdx를 인자로 받아 , rAryRank에 해당 groupIdx가 있는지 찾는다.
       L_TourneyGroupIDX, R_TourneyGroupIDX
   ================================================================================== */
function findRankInfo(rAryRank, groupIdx) {
    var i = 0,
        len = 0;
    if (rAryRank == null) return 0;

    len = rAryRank.length;
    for (i = 0; i < len; i++) {
        if (rAryRank[i][0] == groupIdx || rAryRank[i][1] == groupIdx) return 1;
    }
    return 0;
}

/* ==================================================================================
      groupIdx를 인자로 받아 , aryMedal에 해당 groupIdx가 있는지 찾는다.
       TourneyGroupIDX, GameMedalIDX
   ================================================================================== */
function findMedalInfo(aryMedal, groupIdx) {
    var i = 0,
        len = 0;
    if (aryMedal == null) return 0;

    len = aryMedal.length;
    for (i = 0; i < len; i++) {
        if (aryMedal[i][0] == groupIdx) return aryMedal[i][1];
    }
    return 0;
}

// **********************************************************************************
//       Message Box
// **********************************************************************************

/* ==================================================================================
      Ranker Infomation
   ================================================================================== */
function MsgBoxRanker(strPlayer, strTeam, strKind, strOrder) {
    var strPopup = "    \
      <p class='p-name'>Place_Player</p>    \
      <p class='p-temper'>Place_Team</p>    \
      <p class='p-temper'>Place_Kind</p>  \
      <p class='p-ranking'>Place_Order</p>  \
      <a href='#' class='btn ok-btn' onClick=\"onClickMsg1_OK();\">확인</a>    \
      ";

    strPopup = utx.strReplaceAll(strPopup, "Place_Player", strPlayer);
    strPopup = utx.strReplaceAll(strPopup, "Place_Team", strTeam);
    strPopup = utx.strReplaceAll(strPopup, "Place_Kind", strKind);
    strPopup = utx.strReplaceAll(strPopup, "Place_Order", strOrder);

    ctx.writeHtmlToDiv("msg_box1", strPopup);
    msgbox_show("modal-one");
}

/* ==================================================================================
      Entry Confirm
   ================================================================================== */
function MsgBoxConfirm(nCntUser, nRound) {
    var strPopup = "    \
      <p class='p-txt'>전체 엔트리 : <span>Place_CntUser명</span></p>   \
      <p class='p-txt'>강수 : <span>Place_Round강</span></p>   \
      <p class='b-txt'>저장하시겠습니까?</p>   \
      <div class='btn-box'>   \
         <a href='#' class='btn ok-btn' onClick=\"onClickMsg2_Cancel();\">취소</a>   \
         <a href='#' class='btn ok-btn' onClick=\"onClickMsg2_OK();\">확인</a>   \
      </div>    \
      ";

    strPopup = utx.strReplaceAll(strPopup, "Place_CntUser", nCntUser);
    strPopup = utx.strReplaceAll(strPopup, "Place_Round", nRound);

    ctx.writeHtmlToDiv("msg_box2", strPopup);
    msgbox_show("modal-tow");
}

/* ==================================================================================
      preview
   ================================================================================== */
function TourPreview() {
    var qtourna = document.getElementById("div_QTournament_body").innerHTML;
    var dtourna = document.getElementById("div_FTournament").innerHTML,
        dtournaH = document.getElementById("div_FTournament").offsetHeight;
    // var dtourna=$("#div_FTournament").html();
    var strPopup = "";
    strPopup += "<div id='ptbox'>";
    strPopup += "<p>예선</p>";
    strPopup += qtourna;
    strPopup += "<p>본선</p>";
    strPopup += dtourna;
    strPopup += "</div>";
    strPopup += "    \
     <div class='btn-box'>   \
        <a href='#' class='btn ok-btn' onClick=\"onClickMsg2_Cancel();\">취소</a>   \
        <a href='#' class='btn ok-btn' onClick=\"javascript:$('#ptbox').printThis({importCSS:true, loadCSS:'/css/print_schedule.css'});\">출력</a>   \
     </div>    \
     ";

    ctx.writeHtmlToDiv("to_box", strPopup);

    msgbox_show("modal-to");


    // var beforePrint=function(){
    //   console.log("프린트 전 호출");
    // };
    // var afterPrint=function(){
    //   $("#to_box").removeAttr("style");
    //   setTimeout(function(){
    //     $("#to_box").attr("style", "display:block;overflow-y:auto");
    //   },10);
    //   console.log("프린트 후 호출");
    // };
    // if(window.matchMedia){
    //   var mq=window.matchMedia("print");
    //   mq.addListener(function(mql){
    //     if(mql.matches){
    //       beforePrint();
    //     }else{
    //       afterPrint();
    //     }
    //   });
    // }
    // window.onbeforeprint=beforePrint;
    // window.onafterprint=afterPrint;
}

/* ==================================================================================
      Q (예선조) Group User
   ================================================================================== */
function MsgBoxQList(rAryQ, nQGroup, playType) {
    var strPopup = " ",
        strUser = "";
    var i = 0,
        sp = 0,
        ep = 0;
    len = rAryQ.length;

    sp = (nQGroup - 1) * 4;
    ep = sp + 4;

    strPopup = utx.sprintf("<P>예선 {0}조</P><br>", nQGroup);

    for (i = sp; i < ep; i++) {
        if (rAryQ[i][2] == E_POS_BYE) strUser = "<p>BYE</p>";
        else {
            if (playType == "B0020001") // 단식
            {
                document.getElementById("msg_box3").classList.add("dansic");
                strUser = utx.sprintf("<P><span>{0}({1})</span></p>", rAryQ[i][7], rAryQ[i][9]);
                //   strUser = utx.sprintf("<P><span class='name'>{0}({1})</span></p>", rAryQ[i][7], rAryQ[i][9]);
            } else { // 복식
                document.getElementById("msg_box3").classList.add("bocsic");
                strUser = utx.sprintf("<P><span>{0}({1})/{2}({3})</span></p>", rAryQ[i][7], rAryQ[i][11], rAryQ[i][9], rAryQ[i][13]);
                // strUser = utx.sprintf("<P><span class='name'>{0}({1})/{2}({3})</span></p>", rAryQ[i][7], rAryQ[i][11], rAryQ[i][9], rAryQ[i][13]);
            }
        }

        strPopup += strUser;
    }


    strPopup += "    \
         <div class='btn-box'>   \
            <a href='#' class='btn ok-btn' onClick=\"onClickMsg3_OK();\">확인</a>   \
         </div>    \
         ";

    ctx.writeHtmlToDiv("msg_box3", strPopup);
    msgbox_show("modal-three");
}

/* ==================================================================================
      Entry Confirm
   ================================================================================== */
function MsgBoxSeedList(arySeed, playType) {
    var strPopup = " ",
        strUser = "",
        strAttend = "<p>",
        strNotAttend = "<p class='red-font'>";
    var i = 0,
        len = 0,
        bAttend = false;

    if (arySeed == null) return;
    len = arySeed.length;

    for (i = 0; i < len; i++) {
        bAttend = (arySeed[i][1] == 1) ? true : false;
        if (arySeed[i][0] != 0) {
            strPopup += (bAttend) ? strAttend : strNotAttend;

            if (arySeed[i][0] <= 3) {
                strPopup += utx.strPrintf("<span class='number'>{0}위 </span>", arySeed[i][0]);
            } else {
                strPopup += utx.strPrintf("<span class='number'>{0}강 </span>", arySeed[i][0]);
            }

            document.getElementById("msg_box3").classList.remove("bocsic", "dansic");
            if (playType == "B0020001") // 단식
            {
                document.getElementById("msg_box3").classList.add("dansic");
                //bmx.GetSimpleTeamName(l_info[9])
                strUser = utx.strPrintf("{0}({1})", arySeed[i][4], bmx.GetSimpleTeamName(arySeed[i][7]));
                //strUser = utx.strPrintf("{0}({1})", arySeed[i][4], arySeed[i][7]);
            } else { // 복식
                document.getElementById("msg_box3").classList.add("bocsic");
                strUser = utx.strPrintf("{0}({1})/{2}({3})", arySeed[i][4], bmx.GetSimpleTeamName(arySeed[i][7]), arySeed[i + 1][4], bmx.GetSimpleTeamName(arySeed[i + 1][7]));
                //strUser = utx.strPrintf("{0}({1})/{2}({3})", arySeed[i][4], arySeed[i][7], arySeed[i+1][4], arySeed[i+1][7]);
                i++;
            }

            if (bAttend) strPopup += utx.strPrintf("<span class='name'>{0}</span>", strUser);
            else strPopup += utx.strPrintf("<span class='name'>{0} (X)</span>", strUser);
            strPopup += "</p>"
        }
    }


    strPopup += "    \
      <div class='btn-box'>   \
         <a href='#' class='btn ok-btn' onClick=\"onClickMsg3_OK();\">확인</a>   \
      </div>    \
      ";

    ctx.writeHtmlToDiv("msg_box3", strPopup);
    msgbox_show("modal-three");
}

/* ==================================================================================
      선수 찾기
   ================================================================================== */
function MsgBoxSearchPlayer(nPos) {
    var strPopup = utx.sprintf(" <div>  \
		선수명 / 소속 검색 <br>    \
		<input type='text' id = 'txt_manual_search'/>   \
	</div>   \
	<div class='btn-box'>   \
		<a href='#' class='btn ok-btn' onClick='onClickMsg4_OK({0})';>확인</a> \
   </div>   ", nPos);

    ctx.writeHtmlToDiv("msg_box4", strPopup);
    setTimeout(function() {
        $("#txt_manual_search").focus();
    }, 600);

    msgbox_show("modal-four");
}

/* ==================================================================================
      Message Box Modal Show
================================================================================== */
function msgbox_show(id_msgbox) {
    if (!($(".modal-warp").hasClass("on"))) {
        $("." + id_msgbox).addClass("on").css("display", "block");
        $(".fixed-bg").addClass("on").css("display", "block");
    }
}

/* ==================================================================================
     Message Box Modal Hide
================================================================================== */
function msgbox_hide(id_msgbox) {
    $(".modal-warp").removeClass("on").css("display", "none");
    $("." + id_msgbox).removeClass("on").css("display", "none");
    $(".fixed-bg").removeClass("on").css("display", "none");
}

// **********************************************************************************
//       참가자 리스트
// **********************************************************************************
/* ==================================================================================
   Test Func - 참가신청 리스트 rAryReqUser Field 상단 참조
   ================================================================================== */
function ApplyList(rAryReq, playType) {
    var i = 0,
        len = rAryReq.length,
        strTeam = "",
        strTeam2 = "",
        cntTotal = 0,
        cntTeam = 0,
        teamOrder = 0;
    var strHtml = "",
        strSeedMark = "s_related",
        strRank;
    var bMixTeam = false;

    var nMaxUser, nUserCnt, IsDblPlay, selRound;
    var nMaxQGroup, strMsg
    selRound = Number(ctx.getSelectVal("sel_round"));
    IsDblPlay = bmx.IsDoublePlay(playType);

    nUserCnt = gAryGameUser.length;
    nUserCnt = (IsDblPlay == 1) ? (nUserCnt) / 2 : (nUserCnt);

    if (nUserCnt > selRound) {
        nMaxQGroup = (selRound / 4);
        nMaxUser = (2 * selRound) - nMaxQGroup;

        if (nUserCnt > nMaxUser) {
            strMsg = utx.sprintf("{0}강 최대 인원수는 \r\n예선조 {1}개 포함 {2}명입니다.", selRound, nMaxQGroup, nMaxUser);
            alert(strMsg);
            return false;
        }
    }


    for (i = 0; i < len; i++) {
        if (teamOrder != rAryReq[i][1]) // Team Name - entrybox row start
        {
            // 이전팀의 cnt를 Display하고 row를 마무리 한다.
            if (strTeam != "") {
                strHtml += utx.strPrintf(" </div>  </div> <div class='entryBox__col'>	<span>{0}</span> </div>  </div>", cntTeam);
                cntTotal += cntTeam;
            }

            teamOrder = rAryReq[i][1];
            strTeam = bmx.GetSimpleTeamName(rAryReq[i][11]);
            bMixTeam = false;

            if (IsDoublePlay(playType)) {
                strTeam2 = bmx.GetSimpleTeamName(rAryReq[i + 1][11]);
                if (strTeam != strTeam2) bMixTeam = true;
            }

            if (bMixTeam == true) {
                strHtml += utx.strPrintf("<div class='entryBox__row'> <div class='entryBox__col'> <span>{0}<br>{1}</span> </div>", strTeam, strTeam2);
            } else {
                strHtml += utx.strPrintf("<div class='entryBox__row'> <div class='entryBox__col'> <span>{0}</span> </div>", strTeam);
            }

            strHtml += "<div class='entryBox__col'> <div class='entry'> "
            cntTeam = 0;
        }

        if (IsDoublePlay(playType)) { // 복식
            if (rAryReq[i][3]) {
                strRank = (rAryReq[i][3] <= 3) ? utx.strPrintf("{0}위", rAryReq[i][3]) : utx.strPrintf("{0}강", rAryReq[i][3]);
                strHtml += utx.strPrintf("<button class='entry__item {0}' onClick=\"onClickRankerInfoDbl('{1}', '{2}');\">	<p>{3}({4})</p> <p>{5}</p>",
                    strSeedMark, rAryReq[i][8], rAryReq[i + 1][8], rAryReq[i][9], strRank, rAryReq[i + 1][9]);
            } else {
                strHtml += utx.strPrintf("<button class='entry__item {0}' onClick=\"onClickRankerInfoDbl('{1}', '{2}');\">	<p>{3}</p> <p>{4}</p>",
                    "", rAryReq[i][8], rAryReq[i + 1][8], rAryReq[i][9], rAryReq[i + 1][9]);
            }
            strHtml += utx.strPrintf("<input type='text' id = 'ed_seed{0}' class='entry__input' maxlength='4' value='' onClick=\"onClickEditRankerInfo()\"> </button>", rAryReq[i][6]);
            i++;
        } else { // 단식
            if (rAryReq[i][3]) {
                strRank = (rAryReq[i][3] <= 3) ? utx.strPrintf("{0}위", rAryReq[i][3]) : utx.strPrintf("{0}강", rAryReq[i][3]);
                strHtml += utx.strPrintf("<button class='entry__item {0}' onClick=\"onClickRankerInfo('{1}');\">	<p>{2}({3})</p>",
                    strSeedMark, rAryReq[i][8], rAryReq[i][9], strRank);
            } else {
                strHtml += utx.strPrintf("<button class='entry__item {0}' onClick=\"onClickRankerInfo('{1}');\">	<p>{2}</p>",
                    "", rAryReq[i][8], rAryReq[i][9]);
            }
            strHtml += utx.strPrintf("<input type='text' id = 'ed_seed{0}' class='entry__input' maxlength='4' value='' onClick=\"onClickEditRankerInfo()\"> </button>", rAryReq[i][6]);
        }
        cntTeam++;
    }

    // 이전팀의 cnt를 Display하고 row를 마무리 한다.
    if (strTeam != "") {
        strHtml += utx.strPrintf(" </div>  </div> <div class='entryBox__col'>	<span>{0}</span> </div>  </div>", cntTeam);
        cntTotal += cntTeam;
    }

    ctx.writeHtmlToDiv("div_entry_body", strHtml);
    ctx.setSpanText("sp_entry_total", cntTotal);

    return true;
}

/* ==================================================================================
   Test Func - 참가신청 리스트 rAryReqUser Field 상단 참조 팀전
   ================================================================================== */
function ApplyTeamList(rAryReq, playType) {
    var i = 0,
        len = rAryReq.length,
        strTeam = "",
        strShortTeam = "",
        strTeam2 = "",
        cntTotal = 0,
        cntTeam = 0,
        teamOrder = 0;
    var strHtml = "",
        strSeedMark = "s_related",
        strRank;
    var bMixTeam = false;

    var nMaxUser, nUserCnt, IsDblPlay, selRound;
    var nMaxQGroup, strMsg
    selRound = Number(ctx.getSelectVal("sel_round"));
    IsDblPlay = bmx.IsDoublePlay(playType);

    nUserCnt = gAryGameUser.length;
    nUserCnt = (IsDblPlay == 1) ? (nUserCnt) / 2 : (nUserCnt);

    if (nUserCnt > selRound) {
        nMaxQGroup = (selRound / 4);
        nMaxUser = (2 * selRound) - nMaxQGroup;

        if (nUserCnt > nMaxUser) {
            strMsg = utx.sprintf("{0}강 최대 인원수는 \r\n예선조 {1}개 포함 {2}명입니다.", selRound, nMaxQGroup, nMaxUser);
            alert(strMsg);
            return false;
        }
    }


    for (i = 0; i < len; i++) {
        if (teamOrder != rAryReq[i][1]) // Team Name - entrybox row start
        {
            // 이전팀의 cnt를 Display하고 row를 마무리 한다.
            if (strTeam != "") {
                strHtml += utx.strPrintf(" </div>  </div> <div class='entryBox__col'>	<span>{0}</span> </div>  </div>", cntTeam);
                cntTotal += cntTeam;
            }

            teamOrder = rAryReq[i][1];
            strTeam = bmx.GetSimpleTeamName(rAryReq[i][9]);
            bMixTeam = false;

            strHtml += utx.strPrintf("<div class='entryBox__row'> <div class='entryBox__col'> <span>{0}</span> </div>", strTeam);

            strHtml += "<div class='entryBox__col'> <div class='entry'> "
            cntTeam = 0;
        }

        strShortTeam = bmx.GetSimpleTeamName(rAryReq[i][9]);
        strShortTeam = utx.getBlockData(strShortTeam, "", "/");
        if (rAryReq[i][8] != "" && rAryReq[i][8] != "0") strShortTeam = utx.sprintf("{0}-{1}", strShortTeam, rAryReq[i][8]);

        strHtml += utx.strPrintf("<button class='entry__item {0}' onClick=\"onClickRankerInfo('{1}');\">	<p>{2}</p>",
            "", "", strShortTeam);

        strHtml += utx.strPrintf("<input type='text' id = 'ed_seed{0}' class='entry__input' maxlength='4' value='' onClick=\"onClickEditRankerInfo()\"> </button>", rAryReq[i][6]);
        cntTeam++;
    }

    // 이전팀의 cnt를 Display하고 row를 마무리 한다.
    if (strTeam != "") {
        strHtml += utx.strPrintf(" </div>  </div> <div class='entryBox__col'>	<span>{0}</span> </div>  </div>", cntTeam);
        cntTotal += cntTeam;
    }

    ctx.writeHtmlToDiv("div_entry_body", strHtml);
    ctx.setSpanText("sp_entry_total", cntTotal);

    return true;
}

/* ==================================================================================
      복식 이면서 혼합 게임인지 확인 - aryReqUser Field 상단 참조
   ================================================================================== */
function IsMixGame(rAryReq, playType) {
    var len = 0,
        i = 0,
        bMixGame = false;

    if (!IsDoublePlay(playType)) return false;

    len = rAryReq.length;
    for (i = 0; i < len; i++) {
        if (rAryReq[i][10] != rAryReq[i + 1][10]) {
            bMixGame = true;
            break;
        }
        i++;
    }

    return bMixGame;
}
/* ==================================================================================
      teamOrder를 셋팅
      혼합팀이면서 팀이 서로 틀릴경우 team_a1/team_b1 와 team_b1/team_a1은 서로 같은 팀이다.
      이는 문자열로 비교가 불가 하므로 teamOrder를 생성하여 같은 팀임을 만들어 준다.
      단식이거나 , 복식이라도 팀명이 서로 같으면 문자열 비교로 TeamOrder를 만들어 준다.
   ================================================================================== */
function makeTeamOrder(rAryReq, playType) {
    if (IsDoublePlay(playType)) return makeTeamOrderDbl(rAryReq, playType);

    var i = 0,
        len = rAryReq.length,
        aryTmp;
    var fLoop = 1,
        cntLoop = 0,
        loopMax = 1000,
        idx = 0;
    var team1 = 0,
        team2 = 0,
        ret = 0,
        steam = -1,
        tOrder = 0;

    aryTmp = new Array();

    while (fLoop) {
        if (steam == -1) {
            // team을 구할수 없으면 다 copy한 거다.
            ret = GetNextTeam(rAryReq);
            if (ret == -1) {
                fLoop = 0;
                continue;
            }
            team1 = rAryReq[ret][10];
            tOrder++;
        }

        steam = GetSameTeam(rAryReq, team1);
        if (steam == -1) continue;

        aryTmp[idx] = utx.cloneObject(rAryReq[steam]);
        aryTmp[idx][1] = tOrder;
        rAryReq[steam][0] = 1; // 사용했다는 표시를 한다.
        idx++;

        if (cntLoop > loopMax) // 문제가 있지만 무한 루프 빠지지 않게 이쯤에서 끝내자.
        {
            fLoop = 0;
            continue;
        }

        cntLoop++;
    }

    // rAryReq에 aryTmp를 Deep Copy하자.
    for (i = 0; i < len; i++) {
        rAryReq[i] = utx.cloneObject(aryTmp[i]);
    }

    aryTmp = null;
}

/* ===================================================================================
   - aryReq에서 복식 팀을 추출하여 같은 팀이 있는지 전체 배열을 대상으로 비교를 한다.
   - aryReq에 팀이 중간에 혼합되어 들어 갈수 있기 때문에 팀별로 재 정렬이 필요하다.
   - 같은팀을 모두 찾으면 다시 팀을 추출하여 반복한다.

      복식일 경우 혼합팀 유무를 확인한다.
      1. List에서 혼합팀이 존재할 경우 별도의 List에 삽입한다.
      2. aryReq와 같은 크기의 배열을 잡는다. aryReqTmp
      3. aryReqTmp에 aryReq로 부터 한 팀씩 데이터를 추출한다.
      4. aryReqTmp에 copy된 리스트는 mark를 한다.
      5. aryReq에서 mark가 되지 않은 Team을 모든 인원이 소모될때까지 복사한다.
      6. aryReqTmp에 정렬된 데이터를 aryReq로 copy한다.

      aryReq->aryReqTmp copy시 고려사항
      1. aryReq에 나타나는 Team 순서로 copy가 이루어 져야 한다.
      2. aryReq에 Team내의 선수 순서도 바뀌면 안된다.
      3. 복식일 경우 단일팀, 혼합팀이 혼재할 경우 단일팀을 먼저 복사한다 .
      4. 단일팀 복사후 , 바로 다음팀으로 혼합팀을 복사한다.
   =================================================================================== */

function makeTeamOrderDbl(rAryReq, playType) {
    var i = 0,
        len = rAryReq.length,
        aryTmp;
    var fLoop = 1,
        cntLoop = 0,
        loopMax = 1000,
        idx = 0;
    var team1 = 0,
        team2 = 0,
        ret = 0,
        steam = -1,
        tOrder = 0;

    aryTmp = new Array();

    while (fLoop) {
        if (steam == -1) {
            // team을 구할수 없으면 다 copy한 거다.
            ret = GetNextTeam(rAryReq);
            if (ret == -1) {
                fLoop = 0;
                continue;
            }
            team1 = rAryReq[ret][10];
            team2 = rAryReq[ret + 1][10];
            tOrder++;
        }

        steam = GetSameTeamDbl(rAryReq, team1, team2);
        if (steam == -1) continue;

        //복식이니까 2개씩 복사한다.
        aryTmp[idx] = utx.cloneObject(rAryReq[steam]);
        aryTmp[idx + 1] = utx.cloneObject(rAryReq[steam + 1]);
        aryTmp[idx][1] = tOrder;
        aryTmp[idx + 1][1] = tOrder;

        rAryReq[steam][0] = 1; // 사용했다는 표시를 한다.
        rAryReq[steam + 1][0] = 1;
        idx += 2;

        if (cntLoop > loopMax) // 문제가 있지만 무한 루프 빠지지 않게 이쯤에서 끝내자.
        {
            fLoop = 0;
            continue;
        }

        cntLoop++;
    }

    // rAryReq에 aryTmp를 Deep Copy하자.
    for (i = 0; i < len; i++) {
        rAryReq[i] = utx.cloneObject(aryTmp[i]);
    }

    aryTmp = null;
}

/* ===================================================================================
      복식/혼합 팀 일경우 같은 팀 인지 확인하는 function rAryReqUser Field 상단 참조
      team1, team2를 인자로 받아 비교한다.
   =================================================================================== */
function GetSameTeam(rAryReq, team1) {
    var i = 0,
        len = rAryReq.length;

    for (i = 0; i < len; i++) {
        if (rAryReq[i][0] == 0) // 할당하지 않았다. 여기서 찾자
        {
            if (rAryReq[i][10] == team1) return i; // 찾았다. return
        }
    }

    return -1;
}

/* ===================================================================================
      복식/혼합 팀 일경우 같은 팀 인지 확인하는 function rAryReqUser Field 상단 참조
      team1, team2를 인자로 받아 비교한다.
   =================================================================================== */
function GetSameTeamDbl(rAryReq, team1, team2) {
    var i = 0,
        len = rAryReq.length;

    for (i = 0; i < len; i += 2) // 복식이니까 2개씩 증가
    {
        if (rAryReq[i][0] == 0) // 할당하지 않았다. 여기서 찾자
        {
            // team1, team2가 앞뒤로 바뀌어도 같은 팀으로 처리한다.
            if ((rAryReq[i][10] == team1 && rAryReq[i + 1][10] == team2) || (rAryReq[i][10] == team2 && rAryReq[i + 1][10] == team1)) {
                return i; // 찾았다. return
            }
        }
    }

    return -1;
}

/* ===================================================================================
      rAryReq를 입력받아 사용 가능한 팀 Idx를 Return한다. rAryReqUser Field 상단 참조
      더이상 사용가능한 팀이 없을때 return -1
   =================================================================================== */
function GetNextTeam(rAryReq) {
    var i = 0,
        len = rAryReq.length;

    for (i = 0; i < len; i++) {
        if (rAryReq[i][0] == 0) return i;
    }

    return -1;
}

/* ===================================================================================
   playType - Single Game / Double Game ( 단식/복식 유무 )
   =================================================================================== */
IsDoublePlay = function(playType) {
    return (playType == "B0020002");
}

// **********************************************************************************
//       Tournament
// **********************************************************************************

/* ==================================================================================
   make Tonament div - 예선전 토너먼트 생성시 사용
   container tournament obj -
================================================================================== */
function createDivForTonament(id_parent, id_div, id_divInfo) {
    var strInfoHtml = utx.strPrintf("<br><div id='{0}' class='tournament_info'> </div>", id_divInfo);
    var strHtml = utx.strPrintf("<div id='{0}' class='bottom-list div_QTournament'> </div>", id_div);
    ctx.appendHtmlToDiv(id_parent, strInfoHtml);
    ctx.appendHtmlToDiv(id_parent, strHtml);
}

/* ==================================================================================
   make Tonament - div id를 입력받아 tonament Object을 생성하고 , 반환한다.
================================================================================== */
function makeTournament(id_div) {
    var tournament = new Tournament();

    tournament.setOption({
        blockBoardWidth: 212, // integer board 너비
        blockBranchWidth: 30, // integer 트리 너비
        blockHeight: 50, // integer 블럭 높이(board 간 간격 조절)
        branchWidth: 2, // integer 트리 두께
        branchColor: '#dddddd', // string 트리 컬러
        // branchColor : '#000000', // string 트리 컬러
        roundOf_textSize: 10, // integer 배경 라운드 텍스트 크기
        scale: 1, // mix decimal or 'auto' 'auto'면 화면 너비에 맞게 스케일 조정
        board: true, // boolean  default:true  false면 1round 제외 board 가리기(대진추첨용)
        el: document.getElementById(id_div) // element must have id
    });


    tournament.setStyle('#' + id_div);

    tournament.boardInner = function(data) {
        if (data && data.bDblPlay == 1) return boardInner_Double(data);
        return boardInner_single(data);
    }
    return tournament;
}

/* ==================================================================================
   draw Tonament - tonament Object, round, data를 입력받아 tonament를 그린다.
================================================================================== */
function drawTournament(objT, round, sRound, eRound, matchData) {
    objT.draw({
        limitedStartRoundOf: sRound, //16    integer(짝수)  default:0 전체, 그리기 시작할 라운드 ex)8강 부터
        limitedEndRoundOf: eRound, //8       integer(짝수)  default:0 전체, 그리기 끝날 라운드 ex)4강 까지
        roundOf: round,
        data: {
            round_1: matchData
        },
    });
}


emptyData64 = new Array();
emptyData32 = new Array();
emptyData16 = new Array();
emptyData8 = new Array();
emptyData4 = new Array();
emptyData2 = new Array();

MakeEmptyData(emptyData64, 64);
MakeEmptyData(emptyData32, 32);
MakeEmptyData(emptyData16, 16);
MakeEmptyData(emptyData8, 8);
MakeEmptyData(emptyData4, 4);
MakeEmptyData(emptyData2, 2);

function MakeEmptyData(rAryEmpty, round) {
    var i = 0,
        max = round / 2;

    for (i = 0; i < max; i++) {
        rAryEmpty.push({
            matchNo: i,
            l_player: '',
            l_team: '',
            r_player: '',
            r_team: '',
        });
    }
}

/* ==================================================================================
   draw Tonament - tonament Object, round, data를 입력받아 tonament를 그린다.
================================================================================== */
function drawTournament2(objT, round, sRound, eRound, matchData) {
    objT.draw({
        limitedStartRoundOf: sRound, //16    integer(짝수)  default:0 전체, 그리기 시작할 라운드 ex)8강 부터
        limitedEndRoundOf: eRound, //8       integer(짝수)  default:0 전체, 그리기 끝날 라운드 ex)4강 까지
        roundOf: round,
        data: {
            round_1: matchData,
        },
    });
}


/* ==================================================================================
   data set-  tonament block - single game
   dat를 입력받아 싱글 게임일때 block을 그린다.
================================================================================== */
function boardInner_single(data) {
    var l_player, l_team;
    var r_player, r_team;
    var l_sel, r_sel;
    var l_fill, r_fill;
    var l_dup, r_dup;
    var l_no, r_no;
    var l_spVal, r_spVal;
    var l_pcode, r_pcode;
    var matchNo = 0;
    var r_param, l_param;
    var l_param_id, r_param_id;
    var l_id, r_id;

    if (data) {
        matchNo = data.matchNo;

        l_player = data.l_player;
        l_team = data.l_team;
        l_spVal = data.l_spVal;
        l_pcode = data.l_pcode;

        r_player = data.r_player;
        r_team = data.r_team;
        r_spVal = data.r_spVal;
        r_pcode = data.r_pcode;


        l_fill = data.l_fill ? 's_filled' : '';
        r_fill = data.r_fill ? 's_filled' : '';

        l_dup = data.l_dup ? 's_duplicate' : '';
        r_dup = data.r_dup ? 's_duplicate' : '';

        l_sel = data.l_sel ? 's_selected' : '';
        r_sel = data.r_sel ? 's_selected' : '';

        // 재고.....
        l_no = (matchNo * 2) + 1;
        r_no = (matchNo * 2 + 1) + 1;

        l_id = utx.sprintf("\"pid_{0}\"", l_pcode);
        r_id = utx.sprintf("\"pid_{0}\"", r_pcode);

        l_param_id = utx.sprintf("pid_{0}", l_pcode);
        r_param_id = utx.sprintf("pid_{0}", r_pcode);

        l_param = utx.sprintf("'{0}','{1}','{2}','{3}'", l_no, l_spVal, l_pcode, l_param_id);
        r_param = utx.sprintf("'{0}','{1}','{2}','{3}'", r_no, r_spVal, r_pcode, r_param_id);
    }

    var html = [
        '<p onClick="onSelMatch(' + l_param + ');"  id = ' + l_id + ' class="lotteryMatch lotteryMatch_first [ _match ] ' + l_sel + ' ' + l_dup + ' ' + l_fill + '" data-match-no="' + matchNo + '" data-player-no="' + (matchNo * 2) + '">',
        '<span class="lotteryMatch__seedWrap1">' + l_spVal + '</span>',
        '<span class="lotteryMatch__seedWrap">' + l_no + '</span>',
        '<span class="lotteryMatch__playerWrap">',
        '<span class="lotteryMatch__playerInner">',
        '<span class="lotteryMatch__player [ _player1 ]">' + l_player + '</span>',
        '<span class="lotteryMatch__belong [ _belong1 ]">' + l_team + '</span>',
        '</span>',
        '</span>',
        '</p>',
        '<p onClick="onSelMatch(' + r_param + ');"  id = ' + r_id + ' class="lotteryMatch lotteryMatch_second [ _match ] ' + r_sel + ' ' + r_dup + ' ' + r_fill + '" data-match-no="' + matchNo + '" data-player-no="' + (matchNo * 2 + 1) + '">',
        '<span class="lotteryMatch__seedWrap1">' + r_spVal + '</span>',
        '<span class="lotteryMatch__seedWrap">' + r_no + '</span>',
        '<span class="lotteryMatch__playerWrap">',
        '<span class="lotteryMatch__playerInner">',
        '<span class="lotteryMatch__player [ _player1 ]">' + r_player + '</span>',
        '<span class="lotteryMatch__belong [ _belong1 ]">' + r_team + '</span>',
        '</span>',
        '</span>',
        '</p>'
    ].join('');

    // utx.strReplaceAll(html, "l_param", l_param);
    // utx.strReplaceAll(html, "r_param", r_param);

    // String(html).replace("l_param", l_param);
    // String(html).replace("r_param", r_param);
    return html;
}

/* ==================================================================================
   data set-  tonament block - double game
   data를 입력받아 복식 게임일때 block을 그린다.
================================================================================== */
function boardInner_Double(data) {
    var aryl_player, aryl_team;
    var aryr_player, aryr_team;
    var l_sel, r_sel;
    var l_dup, r_dup;
    var l_fill, r_fill;
    var l_no, r_no;
    var l_spVal, r_spVal;
    var l_pcode, r_pcode;
    var matchNo = 0;
    var r_param, l_param;
    var l_id, r_id;
    var l_param_id, r_param_id;

    if (data) {
        matchNo = data.matchNo;

        aryl_player = (data.l_player.indexOf(',') == -1) ? [data.l_player, ""] : data.l_player.split(',');
        aryl_team = (data.l_team.indexOf(',') == -1) ? [data.l_team, ""] : data.l_team.split(',');
        aryr_player = (data.r_player.indexOf(',') == -1) ? [data.r_player, ""] : data.r_player.split(',');
        aryr_team = (data.r_team.indexOf(',') == -1) ? [data.r_team, ""] : data.r_team.split(',');

        l_spVal = data.l_spVal;
        l_pcode = data.l_pcode;

        r_spVal = data.r_spVal;
        r_pcode = data.r_pcode;

        l_fill = data.l_fill ? 's_filled' : '';
        r_fill = data.r_fill ? 's_filled' : '';

        l_dup = data.l_dup ? 's_duplicate' : '';
        r_dup = data.r_dup ? 's_duplicate' : '';

        l_sel = data.l_sel ? 's_selected' : '';
        r_sel = data.r_sel ? 's_selected' : '';

        // 재고.....
        l_no = (matchNo * 2) + 1;
        r_no = (matchNo * 2 + 1) + 1;

        l_id = utx.sprintf("\"pid_{0}\"", l_pcode);
        r_id = utx.sprintf("\"pid_{0}\"", r_pcode);

        l_param_id = utx.sprintf("pid_{0}", l_pcode);
        r_param_id = utx.sprintf("pid_{0}", r_pcode);

        l_param = utx.sprintf("'{0}','{1}','{2}','{3}'", l_no, l_spVal, l_pcode, l_param_id);
        r_param = utx.sprintf("'{0}','{1}','{2}','{3}'", r_no, r_spVal, r_pcode, r_param_id);
    }

    var html = [
        '<p onClick="onSelMatch(' + l_param + ');" id = ' + l_id + ' class="lotteryMatch lotteryMatch_first [ _match ] ' + l_sel + ' ' + l_dup + ' ' + l_fill + '" data-match-no="' + matchNo + '" data-player-no="' + (matchNo * 2) + '">',
        '<span class="lotteryMatch__seedWrap1">' + l_spVal + '</span>',
        '<span class="lotteryMatch__seedWrap">' + l_no + '</span>',
        '<span class="lotteryMatch__playerWrap">',
        '<span class="lotteryMatch__playerInner">',
        '<span class="lotteryMatch__player [ _player1 ]">' + aryl_player[0] + '</span>',
        '<span class="lotteryMatch__belong [ _belong1 ]">' + aryl_team[0] + '</span>',
        '</span>',
        '<span class="lotteryMatch__playerInner">',
        '<span class="lotteryMatch__player [ _player2 ]">' + aryl_player[1] + '</span>',
        '<span class="lotteryMatch__belong [ _belong2 ]">' + aryl_team[1] + '</span>',
        '</span>',
        '</span>',
        '</p>',
        '<p onClick="onSelMatch(' + r_param + ');" id = ' + r_id + ' class="lotteryMatch lotteryMatch_second [ _match ] ' + r_sel + ' ' + r_dup + ' ' + r_fill + '" data-match-no="' + matchNo + '" data-player-no="' + (matchNo * 2 + 1) + '">',
        '<span class="lotteryMatch__seedWrap1">' + r_spVal + '</span>',
        '<span class="lotteryMatch__seedWrap">' + r_no + '</span>',
        '<span class="lotteryMatch__playerWrap">',
        '<span class="lotteryMatch__playerInner">',
        '<span class="lotteryMatch__player [ _player1 ]">' + aryr_player[0] + '</span>',
        '<span class="lotteryMatch__belong [ _belong1 ]">' + aryr_team[0] + '</span>',
        '</span>',
        '<span class="lotteryMatch__playerInner">',
        '<span class="lotteryMatch__player [ _player2 ]">' + aryr_player[1] + '</span>',
        '<span class="lotteryMatch__belong [ _belong2 ]">' + aryr_team[1] + '</span>',
        '</span>',
        '</span>',
        '</p>'
    ].join('');

    // utx.strReplaceAll(html, "l_param", l_param);
    // utx.strReplaceAll(html, "r_param", r_param);

    // String(html).replace("l_param", l_param);
    // String(html).replace("r_param", r_param);
    return html;
}

/* ==================================================================================
   Debug Func - 참가신청 User Info
   gAryGameUser Field  -  fUse, SeedNo, Ranking, PlayerOrder, GameRequestGroupIDX, GameRequestPlayerIDX,
                        MemberIDX, MemberName, Team, TeamName, PrevTeam, PrevTeamName
   ================================================================================== */
function printAryGameUser(rAryReq, strTitle) {
    var i = 0,
        len = 0,
        strLog;
    if (rAryReq == null) return;
    len = rAryReq.length;

    if (strTitle == undefined) strTitle = "printAryGameUser";

    strLog = utx.strPrintf("======================= {0} ============================", strTitle)
    console.log(strLog);

    for (i = 0; i < len; i++) {
        strLog = utx.strPrintf("fUse = {0}, teamNo = {1}, SeedNo = {2}, Ranking = {3}, dataOrder = {4}, PlayerOrder = {5}, GameRequestGroupIDX = {6}, GameRequestPlayerIDX = {7}, ",
            rAryReq[i][0], rAryReq[i][1], rAryReq[i][2], rAryReq[i][3], rAryReq[i][4], rAryReq[i][5], rAryReq[i][6], rAryReq[i][7]);

        strLog += utx.strPrintf("MemberIDX = {0}, MemberName = {1}, Team = {2}, TeamName = {3}, PrevTeam = {4}, PrevTeamName = {5}",
            rAryReq[i][8], rAryReq[i][9], rAryReq[i][10], rAryReq[i][11], rAryReq[i][12], rAryReq[i][13]);
        console.log(strLog);
    }
    console.log("=======================================================================");
}

/* ==================================================================================
   Debug Func - 연동대회 Ranker Info
   gArySeedUser Field  - GameRanking, ReqGame, TourneyGroupIDX, MemberIDX, UserName, SEX, TEAM, TEAMNM
   ================================================================================== */
function printArySeedUser(rArySeed) {
    var i = 0,
        len = 0,
        strLog;
    if (rArySeed == null) return;
    len = rArySeed.length;

    console.log("=======================================================================");
    console.log("======================= printArySeedUser ============================");
    for (i = 0; i < len; i++) {
        strLog = utx.strPrintf("GameRanking = {0}, ReqGame = {1}, TourneyGroupIDX = {2}, MemberIDX = {3}, UserName = {4}, SEX = {5}, TEAM = {6}, TEAMNM = {7}",
            rArySeed[i][0], rArySeed[i][1], rArySeed[i][2], rArySeed[i][3], rArySeed[i][4], rArySeed[i][5], rArySeed[i][6], rArySeed[i][7]);

        console.log(strLog);
    }
    console.log("=======================================================================");
}

/* ==================================================================================
   Debug Func - Medal User Info
   gAryMedalUser Field  -  TourneyGroupIDX, GameMedalIDX
   ================================================================================== */
function printAryMedalUser(rAryMedal) {
    var i = 0,
        len = 0,
        strLog;
    if (rAryMedal == null) return;
    len = rAryMedal.length;

    console.log("=======================================================================");
    console.log("======================= printAryMedalUser ============================");
    for (i = 0; i < len; i++) {
        strLog = utx.strPrintf("TourneyGroupIDX = {0}, GameMedalIDX = {1}", rAryMedal[i][0], rAryMedal[i][1]);
        console.log(strLog);
    }
    console.log("=======================================================================");
}

/* ==================================================================================
   Debug Func - 8 Round Ranker Info
   gAryRank8Info Field  -   L_TourneyGroupIDX, R_TourneyGroupIDX  - Left Team , Right Team Group Idx
   ================================================================================== */
function printAryRank8Info(rAryRank8) {
    var i = 0,
        len = 0,
        strLog;
    if (rAryRank8 == null) return;
    len = rAryRank8.length;

    console.log("=======================================================================");
    console.log("======================= printAryRank8Info ============================");
    for (i = 0; i < len; i++) {
        strLog = utx.strPrintf("L_TourneyGroupIDX, R_TourneyGroupIDX", rAryRank8[i][0], rAryRank8[i][1]);
        console.log(strLog);
    }
    console.log("=======================================================================");
}

/* ==================================================================================
   Debug Func - 4 Round Ranker Info
   gAryRank4Info Field  -   L_TourneyGroupIDX, R_TourneyGroupIDX  - Left Team , Right Team Group Idx
   ================================================================================== */
function printAryRank4Info(rAryRank4) {
    var i = 0,
        len = 0,
        strLog;
    if (rAryRank4 == null) return;
    len = rAryRank4.length;

    console.log("=======================================================================");
    console.log("======================= printAryRank4Info ============================");
    for (i = 0; i < len; i++) {
        strLog = utx.strPrintf("L_TourneyGroupIDX, R_TourneyGroupIDX", rAryRank4[i][0], rAryRank4[i][1]);
        console.log(strLog);
    }
    console.log("=======================================================================");
}

/* ==================================================================================
      Ranker Info가 있을 경우 strPlayer,strTeam,strOrder를 한 문자열로 반환한다.  - 단식
   ================================================================================== */
function GetRankerInfo(rAryReq, memIdx) {
    var i = 0,
        len = 0,
        strInfo = "",
        strTeam, strOrder, strPlayer;
    if (rAryReq == null) return;
    len = rAryReq.length;

    for (i = 0; i < len; i++) {
        if (rAryReq[i][8] == memIdx) {
            if (rAryReq[i][3] == "0") return "";

            strPlayer = rAryReq[i][9];
            strTeam = (rAryReq[i][10] == rAryReq[i][12]) ? rAryReq[i][11] : utx.strPrintf("{0} (前 {1})", rAryReq[i][11], rAryReq[i][13]);
            strOrder = (rAryReq[i][3] <= 3) ? utx.strPrintf("{0} 위", rAryReq[i][3]) : utx.strPrintf("{0} 강", rAryReq[i][3]);
            strInfo = utx.strPrintf("{0},{1},{2}", strPlayer, strTeam, strOrder);
            return strInfo;
        }
    }

    return "";
}


/* ==================================================================================
   Ranker Info가 있을 경우 strPlayer,strTeam,strOrder를 한 문자열로 반환한다.  - 복식
================================================================================== */
function GetRankerInfoDbl(rAryReq, memIdx) {
    var i = 0,
        len = 0,
        strInfo = "",
        strTeam, strTeam1, strTeam2, strOrder, strPlayer;
    if (rAryReq == null) return;
    len = rAryReq.length;

    for (i = 0; i < len - 1; i++) {
        if (rAryReq[i][8] == memIdx) {
            if (rAryReq[i][3] == "0") return "";

            strPlayer = utx.strPrintf("{0}/{1}", rAryReq[i][9], rAryReq[i + 1][9]);
            strTeam1 = (rAryReq[i][10] == rAryReq[i][12]) ? rAryReq[i][11] : utx.strPrintf("{0} (前 {1})", rAryReq[i][11], rAryReq[i][13]);
            strTeam2 = (rAryReq[i + 1][10] == rAryReq[i + 1][12]) ? rAryReq[i + 1][11] : utx.strPrintf("{0} (前 {1})", rAryReq[i + 1][11], rAryReq[i + 1][13]);
            strTeam = utx.strPrintf("{0}/{1}", strTeam1, strTeam2);

            strOrder = (rAryReq[i][3] <= 3) ? utx.strPrintf("{0} 위", rAryReq[i][3]) : utx.strPrintf("{0} 강", rAryReq[i][3]);
            strInfo = utx.strPrintf("{0},{1},{2}", strPlayer, strTeam, strOrder);
            return strInfo;
        }
    }
    return "";
}


/* ==================================================================================
      운영자가 입력한 Seed Number가 valid한지 체크한다.
      중복값 or 1부터 시작한 값이 중간에 빠진값이 있으면 안된다. Sort한후 체크
      호출하기 전에 sort가 되어 있어야 한다.
      rArySeedNo : groupIdx, SeedNo
   ================================================================================== */
function checkSeedValid(rArySeedNo) {
    var i = 0,
        len = 0;
    if (rArySeedNo == undefined || rArySeedNo == null) return false;
    len = rArySeedNo.length;

    for (i = 0; i < len; i++) {
        if (rArySeedNo[i][1] != (i + 1)) return false;
    }
    return true;
}

/* ==================================================================================
      운영자가 입력한 Seed Number를 게임신청 리스트에 적용한다.
      rAryReq    : fUse, teamNo, SeedNo, Ranking, PlayerOrder, GameRequestGroupIDX, GameRequestPlayerIDX,
                     MemberIDX, MemberName, Team, TeamName, PrevTeam, PrevTeamName
      rArySeedNo : groupIdx, SeedNo
   ================================================================================== */
function ApplySeedNoToReqAry(rAryReq, rArySeedNo) {
    var i = 0,
        len = 0,
        seedNo = -1,
        groupIdx = "";
    if (rAryReq == null || rArySeedNo == null) return false;
    len = rAryReq.length;

    for (i = 0; i < len; i++) {
        groupIdx = rAryReq[i][6]
        seedNo = getSeedNo(rArySeedNo, groupIdx);
        if (seedNo != -1) rAryReq[i][2] = seedNo;
    }
    return true;
}

/* ==================================================================================
      groupIdx를 입력받아 SeedNo를 반환한다.
      rArySeedNo : groupIdx, SeedNo
   ================================================================================== */
function getSeedNo(rArySeedNo, groupIdx) {
    var i = 0,
        len = 0;
    if (rArySeedNo == undefined || rArySeedNo == null) return false;
    len = rArySeedNo.length;

    for (i = 0; i < len; i++) {
        if (rArySeedNo[i][0] == groupIdx) return rArySeedNo[i][1];
    }

    return -1;
}

/* ==================================================================================
      rAryReq를 입력받아 dataOrder string을 반환한다.
      만약 data order 순서가 변경되었으면 string을 만들어서 반환하고,
      그렇지 않으면 ""를 반환한다.
   ================================================================================== */
function getStrDataOrder(rAryReq) {
    var i = 0,
        len = 0,
        strInfo = "",
        nOrder = 0;
    var bChangeOrder = false; // data order가 변경 되었다.
    if (rAryReq == undefined || rAryReq == null) return strInfo;
    len = rAryReq.length;

    for (i = 0; i < len; i++) {
        if (nOrder > rAryReq[i][4]) bChangeOrder = true;
        nOrder = rAryReq[i][4];
        if (i == 0) strInfo = utx.sprintf("{0}", nOrder);
        else strInfo = utx.sprintf("{0},{1}", strInfo, nOrder);
    }

    if (bChangeOrder == false) strInfo = "";

    return strInfo;
}

/* ==================================================================================
   rAryReq를 입력받아 teamOrder string을 반환한다.
================================================================================== */
function getStrTeamOrder(rAryReq) {
    var i = 0,
        len = 0,
        strInfo = "";
    if (rAryReq == undefined || rAryReq == null) return strInfo;
    len = rAryReq.length;

    for (i = 0; i < len; i++) {
        nOrder = rAryReq[i][1];
        if (i == 0) strInfo = utx.sprintf("{0}", nOrder);
        else strInfo = utx.sprintf("{0},{1}", strInfo, nOrder);
    }

    return strInfo;
}

/* ==================================================================================
      byePos array를 return
   ================================================================================== */
function getAryBye(nUser) {
    var nCnt = nUser - 1;
    if (nCnt < 0 || nCnt > 255) return null;
    return gAryByePos[nCnt];
}


/* ==================================================================================
      seed no를 받아서 seed text를 반환한다. 1, 2, 3/4, 5/8, 9/16 시드 표시
   ================================================================================== */
function getStrSeed(nSeed) {
    var strSeed = nSeed;
    nSeed = Number(nSeed);

    if (nSeed > 2 && nSeed < 5) strSeed = "3/4";
    else if (nSeed > 4 && nSeed < 9) strSeed = "5/8";
    else if (nSeed > 8 && nSeed < 17) strSeed = "9/16";

    return strSeed;
}
